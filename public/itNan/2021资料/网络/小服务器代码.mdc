# 1、主类

```java
package com.xinzhi;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @author zn
 * @date 2021/1/6
 */
public class Http {

    public static void main(String[] args) throws Exception {
        // 创建服务器
        ServerSocket server = new ServerSocket();
        // 绑定端口
        server.bind(new InetSocketAddress(4888));
        System.out.println("server is running! listening on port 4888!");
        // 开始监听，阻塞的方法
        while (true){
            Socket accept = server.accept();
            System.out.println("A person"+accept.getRemoteSocketAddress().toString()+" is coming!");
            
            // 使用线程池，提升性能
            ExecutorService executorService = Executors.newFixedThreadPool(20);
            executorService.submit(new MyTask(accept));
        }
    }
}

```



# 2、工具类

```java
package com.xinzhi;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

/**
 * @author zn
 * @date 2021/1/6
 */
public class HttpUtils {


    // 使用流获得页面的字符串
    public static String getPage(String url){
        StringBuilder sb = new StringBuilder();
        try {
            if ("".equals(url) || "/".equals(url) || url == null){
                url = "index.html";
            }
            // 寻找觉对的父路劲
            String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            path = path.substring(0,path.lastIndexOf("/")) + "/pages/";
            url = path + url;
            boolean exists = new File(url).exists();
            if (!exists){
                url = path +"404.html";
            }

            InputStream resource = new FileInputStream(url);
            byte[] buf = new byte[1024];
            int len;
            while ((len = resource.read(buf)) != -1){
                sb.append(new String(buf,0,len));
            }
        } catch (Exception e){
            e.printStackTrace();
        }
        return sb.toString();
    }

}

```



# 3、线程任务类

```java
package com.xinzhi;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

/**
 * @author zn
 * @date 2021/1/6
 */
public class MyTask implements Runnable {

    private Socket accept;

    public MyTask(Socket accept){
        this.accept = accept;
    }

    @Override
    public void run() {
        InputStream in = null;
        OutputStream out = null;

        try {
            StringBuilder sb = new StringBuilder();
            in = accept.getInputStream();
            int len;
            byte[] buf = new byte[512];
            while ((len = in.read(buf)) != -1) {
                sb.append(new String(buf, 0, len));
                if (len < buf.length) {
                    accept.shutdownInput();
                }
            }
            // 构建一个请求对象
            Request request = Request.buildRequest(sb.toString());
            // 拿到输出流
            out = accept.getOutputStream();
            // 构建一个响应
            Response response = new Response();
            response.setData(HttpUtils.getPage(request.getUrl()));
            response.addHeader("a","b");
            response.write(out);
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (accept != null){
                try {
                    accept.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }
}

```



# 4、自己封装请求

```java
package com.xinzhi;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

/**
 * @author zn
 * @date 2021/1/6
 */
public class Request {

    private String type;
    private String url;
    private String protocol;

    private String contentType;

    private Map<String,String> headers = new HashMap<>(8);

    private Map<String,String> attributes = new HashMap<>(8);

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public Map<String, String> getHeaders() {
        return headers;
    }

    public void setHeaders(Map<String, String> headers) {
        this.headers = headers;
    }

    public Map<String, String> getAttributes() {
        return attributes;
    }

    public void setAttributes(Map<String, String> attributes) {
        this.attributes = attributes;
    }

    @Override
    public String toString() {
        return "Request{" +
                "type='" + type + '\'' +
                ", url='" + url + '\'' +
                ", protocol='" + protocol + '\'' +
                ", contentType='" + contentType + '\'' +
                ", headers=" + headers +
                ", attributes=" + attributes +
                '}';
    }

    // 通过请求的报文字符串构建一个请求对象
    public static Request buildRequest(String requestStr){
        Request request = new Request();
        String[] split = requestStr.split("\r\n\r\n");
        // 请求行 和 请求头
        String[] lineAndHeader = split[0].split("\r\n");
        String[] lines = lineAndHeader[0].split(" ");
        request.setType(lines[0]);
        request.setUrl(lines[1]);
        request.setProtocol(lines[2]);

        for (int i = 1; i < lineAndHeader.length; i++) {
            String[] header = lineAndHeader[i].split(": ");
            request.getHeaders().put(header[0].trim().toLowerCase(),header[1].trim());
        }

        request.setContentType(request.getHeaders().get("content-type"));

        // 处理请求体
        if (split.length == 2){
			// 可以自己使用postman模拟一个post请求进行分割和存储
        }

        return request;
    }
}

```



# 5、自己封装响应

```java
package com.xinzhi;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

/**
 * @author zn
 * @date 2021/1/6
 */
public class Response {

    private String protocol = "HTTP/1.1";
    private Integer code = 200;
    private String msg = "OK";
    private String ContentType = "text/html;charset=utf-8";
    private String ContentLength;
    private Map<String,String > headers = new HashMap(){{
        put("content-type",ContentType);
    }};
    private String data;


    public Response(){}

    public Response(String protocol, Integer code, String msg) {
        this.protocol = protocol;
        this.code = code;
        this.msg = msg;
    }


    /**
     * 构建响应
     * @return
     */
    public String buildResponse(){
        StringBuilder sb = new StringBuilder();
        sb.append(this.getProtocol()).append(" ")
                .append(this.getCode()).append(" ")
                .append(this.getMsg()).append("\r\n");
        for (Map.Entry<String,String> entry : this.getHeaders().entrySet()){
            sb.append(entry.getKey()).append(": ").append(entry.getValue()).append("\r\n");
        }
        sb.append("\r\n").append(this.getData());
        return sb.toString();
    }

    /**
     * 输出响应
     * @param os
     */
    public void write(OutputStream os){
        try {
            os.write(buildResponse().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if(os != null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    /**
     * 加一个响应头
     * @param key
     * @param value
     */
    public void addHeader(String key,String value){
        this.getHeaders().put(key,value);
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public Map<String, String> getHeaders() {
        return headers;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
        this.setContentLength(data.getBytes().length+"");
    }

    public String getContentType() {
        return this.getHeaders().get("content-type");
    }

    public void setContentType(String contentType) {
        this.getHeaders().put("content-type",contentType);
    }

    public String getContentLength() {
        return  this.getHeaders().get("content-length");
    }

    public void setContentLength(String contentLength) {
        this.getHeaders().put("content-length",this.data.getBytes().length + "");
    }
}

```

