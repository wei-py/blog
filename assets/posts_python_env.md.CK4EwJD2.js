import{_ as s,c as i,o as e,ah as t}from"./chunks/framework.DEXV2HBK.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/python/env.md","filePath":"posts/python/env.md"}'),n={name:"posts/python/env.md"};function h(l,a,p,d,o,r){return e(),i("div",null,a[0]||(a[0]=[t('<p>在 Python 开发中，<strong>切换环境</strong>通常是指在不同的 Python 环境之间切换，比如：</p><ul><li>在 <strong>全局环境</strong> 和 <strong>虚拟环境（venv）</strong> 之间切换</li><li>在多个 <strong>虚拟环境</strong> 之间切换</li><li>使用 <strong>conda 环境</strong> 时，在不同 conda 环境之间切换</li></ul><p>下面我会详细讲解如何切换这些环境。</p><hr><h2 id="🧪-一、使用-venv-创建和切换虚拟环境-推荐" tabindex="-1">🧪 一、使用 <code>venv</code> 创建和切换虚拟环境（推荐） <a class="header-anchor" href="#🧪-一、使用-venv-创建和切换虚拟环境-推荐" aria-label="Permalink to &quot;🧪 一、使用 `venv` 创建和切换虚拟环境（推荐）&quot;">​</a></h2><h3 id="✅-创建虚拟环境" tabindex="-1">✅ 创建虚拟环境 <a class="header-anchor" href="#✅-创建虚拟环境" aria-label="Permalink to &quot;✅ 创建虚拟环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span></span></code></pre></div><p>这会在当前目录创建一个名为 <code>env</code> 的虚拟环境文件夹。</p><hr><h3 id="✅-激活虚拟环境-windows-macos-linux" tabindex="-1">✅ 激活虚拟环境（Windows / macOS / Linux） <a class="header-anchor" href="#✅-激活虚拟环境-windows-macos-linux" aria-label="Permalink to &quot;✅ 激活虚拟环境（Windows / macOS / Linux）&quot;">​</a></h3><h4 id="windows" tabindex="-1">Windows: <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows:&quot;">​</a></h4><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env\\Scripts\\activate</span></span></code></pre></div><p>激活后命令行会变成这样：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env) C:\\path\\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\project</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="macos-linux" tabindex="-1">macOS/Linux: <a class="header-anchor" href="#macos-linux" aria-label="Permalink to &quot;macOS/Linux:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env/bin/activate</span></span></code></pre></div><p>激活后命令行会变成这样：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user@machine:~/project$</span></span></code></pre></div><hr><h3 id="✅-退出虚拟环境" tabindex="-1">✅ 退出虚拟环境 <a class="header-anchor" href="#✅-退出虚拟环境" aria-label="Permalink to &quot;✅ 退出虚拟环境&quot;">​</a></h3><p>无论什么平台，都可以使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deactivate</span></span></code></pre></div><p>退出后会回到全局 Python 环境。</p><hr><h2 id="🐍-二、使用-conda-切换环境-如果你用-anaconda-miniconda" tabindex="-1">🐍 二、使用 <code>conda</code> 切换环境（如果你用 Anaconda/Miniconda） <a class="header-anchor" href="#🐍-二、使用-conda-切换环境-如果你用-anaconda-miniconda" aria-label="Permalink to &quot;🐍 二、使用 `conda` 切换环境（如果你用 Anaconda/Miniconda）&quot;">​</a></h2><h3 id="✅-创建-conda-环境" tabindex="-1">✅ 创建 conda 环境 <a class="header-anchor" href="#✅-创建-conda-环境" aria-label="Permalink to &quot;✅ 创建 conda 环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.9</span></span></code></pre></div><h3 id="✅-激活-conda-环境" tabindex="-1">✅ 激活 conda 环境 <a class="header-anchor" href="#✅-激活-conda-环境" aria-label="Permalink to &quot;✅ 激活 conda 环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span></span></code></pre></div><h3 id="✅-退出-conda-环境" tabindex="-1">✅ 退出 conda 环境 <a class="header-anchor" href="#✅-退出-conda-环境" aria-label="Permalink to &quot;✅ 退出 conda 环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deactivate</span></span></code></pre></div><blockquote><p>💡 注意：如果你同时安装了 <code>venv</code> 和 <code>conda</code>，建议优先使用 conda 来管理环境。</p></blockquote><hr><h2 id="🔁-三、查看当前使用的-python-环境" tabindex="-1">🔁 三、查看当前使用的 Python 环境 <a class="header-anchor" href="#🔁-三、查看当前使用的-python-环境" aria-label="Permalink to &quot;🔁 三、查看当前使用的 Python 环境&quot;">​</a></h2><p>你可以随时运行以下命令来确认你当前使用的是哪个 Python 和 pip：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Linux/macOS</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Windows</span></span></code></pre></div><p>或者：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>输出示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Python 3.10.13</span></span>\n<span class="line"><span>pip 24.0 from /home/user/anaconda3/envs/env/lib/python3.10/site-packages/pip (python 3.10)</span></span></code></pre></div><hr><h2 id="📦-四、多环境快速切换技巧" tabindex="-1">📦 四、多环境快速切换技巧 <a class="header-anchor" href="#📦-四、多环境快速切换技巧" aria-label="Permalink to &quot;📦 四、多环境快速切换技巧&quot;">​</a></h2><h3 id="方法一-使用-bashrc-zshrc-bash-profile-设置别名-linux-macos" tabindex="-1">方法一：使用 <code>.bashrc</code> / <code>.zshrc</code> / <code>.bash_profile</code> 设置别名（Linux/macOS） <a class="header-anchor" href="#方法一-使用-bashrc-zshrc-bash-profile-设置别名-linux-macos" aria-label="Permalink to &quot;方法一：使用 `.bashrc` / `.zshrc` / `.bash_profile` 设置别名（Linux/macOS）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> work</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source ~/work_env/bin/activate&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source ~/personal_env/bin/activate&quot;</span></span></code></pre></div><p>然后执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre></div><p>之后只需输入：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">work</span></span></code></pre></div><p>即可快速进入工作环境。</p><hr><h3 id="方法二-使用-ide-如-vs-code、pycharm-自动识别并切换环境" tabindex="-1">方法二：使用 IDE（如 VS Code、PyCharm）自动识别并切换环境 <a class="header-anchor" href="#方法二-使用-ide-如-vs-code、pycharm-自动识别并切换环境" aria-label="Permalink to &quot;方法二：使用 IDE（如 VS Code、PyCharm）自动识别并切换环境&quot;">​</a></h3><p>现代 IDE 都支持自动检测项目中的虚拟环境，并允许你在界面中一键切换解释器。</p><h4 id="vs-code-示例" tabindex="-1">VS Code 示例： <a class="header-anchor" href="#vs-code-示例" aria-label="Permalink to &quot;VS Code 示例：&quot;">​</a></h4><ol><li>打开命令面板（Ctrl + Shift + P）</li><li>输入 <code>Python: Select Interpreter</code></li><li>选择你要使用的环境</li></ol><hr><h2 id="🧠-小贴士" tabindex="-1">🧠 小贴士 <a class="header-anchor" href="#🧠-小贴士" aria-label="Permalink to &quot;🧠 小贴士&quot;">​</a></h2><table tabindex="0"><thead><tr><th>目标</th><th>推荐做法</th></tr></thead><tbody><tr><td>快速隔离项目依赖</td><td>使用 <code>venv</code></td></tr><tr><td>数据科学/机器学习项目</td><td>使用 <code>conda</code></td></tr><tr><td>多个 Python 版本共存</td><td>使用 <code>pyenv</code>（macOS/Linux）或 <code>py</code> 启动器（Windows）</td></tr></tbody></table><hr><h2 id="❓常见问题解答" tabindex="-1">❓常见问题解答 <a class="header-anchor" href="#❓常见问题解答" aria-label="Permalink to &quot;❓常见问题解答&quot;">​</a></h2><h3 id="q-如何知道我当前在哪个环境" tabindex="-1">Q: 如何知道我当前在哪个环境？ <a class="header-anchor" href="#q-如何知道我当前在哪个环境" aria-label="Permalink to &quot;Q: 如何知道我当前在哪个环境？&quot;">​</a></h3><p>A: 查看终端提示符（如 <code>(env)</code>），或者运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span></span></code></pre></div><h3 id="q-虚拟环境是否可以跨平台复制" tabindex="-1">Q: 虚拟环境是否可以跨平台复制？ <a class="header-anchor" href="#q-虚拟环境是否可以跨平台复制" aria-label="Permalink to &quot;Q: 虚拟环境是否可以跨平台复制？&quot;">​</a></h3><p>A: 不推荐。不同系统编译的库可能不兼容。应该在目标系统重新创建环境。</p><hr><p>在 Python 项目中，<code>requirements.txt</code> 是一个常用的文件，它列出了项目依赖的包及其版本。你可以通过以下几种方式来下载这些依赖包：</p><hr><h2 id="✅-一、使用-pip-安装-requirements-txt-中的依赖" tabindex="-1">✅ 一、使用 <code>pip</code> 安装 requirements.txt 中的依赖 <a class="header-anchor" href="#✅-一、使用-pip-安装-requirements-txt-中的依赖" aria-label="Permalink to &quot;✅ 一、使用 `pip` 安装 requirements.txt 中的依赖&quot;">​</a></h2><h3 id="_1-安装依赖-联网状态下" tabindex="-1">1. <strong>安装依赖（联网状态下）</strong> <a class="header-anchor" href="#_1-安装依赖-联网状态下" aria-label="Permalink to &quot;1. **安装依赖（联网状态下）**&quot;">​</a></h3><p>如果你有网络连接，可以直接使用如下命令安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><p>这会从 <a href="https://pypi.org/" target="_blank" rel="noreferrer">PyPI</a> 下载并安装所有列出的包。</p><hr><h2 id="✅-二、离线安装-先下载再安装" tabindex="-1">✅ 二、离线安装：先下载再安装 <a class="header-anchor" href="#✅-二、离线安装-先下载再安装" aria-label="Permalink to &quot;✅ 二、离线安装：先下载再安装&quot;">​</a></h2><p>如果你需要<strong>在没有网络的环境中安装依赖</strong>，可以先在一个有网的环境中下载好所有依赖包，然后复制到目标机器上进行安装。</p><h3 id="_2-1-在有网络的机器上下载依赖包" tabindex="-1">2.1 在有网络的机器上下载依赖包 <a class="header-anchor" href="#_2-1-在有网络的机器上下载依赖包" aria-label="Permalink to &quot;2.1 在有网络的机器上下载依赖包&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./packages</span></span></code></pre></div><ul><li><code>-d ./packages</code> 表示将所有依赖包下载到当前目录下的 <code>packages</code> 文件夹中。</li></ul><h3 id="_2-2-将-packages-文件夹复制到目标机器" tabindex="-1">2.2 将 packages 文件夹复制到目标机器 <a class="header-anchor" href="#_2-2-将-packages-文件夹复制到目标机器" aria-label="Permalink to &quot;2.2 将 packages 文件夹复制到目标机器&quot;">​</a></h3><p>比如用 U 盘、局域网传输等方式。</p><h3 id="_2-3-在无网络的机器上安装本地依赖包" tabindex="-1">2.3 在无网络的机器上安装本地依赖包 <a class="header-anchor" href="#_2-3-在无网络的机器上安装本地依赖包" aria-label="Permalink to &quot;2.3 在无网络的机器上安装本地依赖包&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --find-links=./packages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><ul><li><code>--no-index</code>：禁止从网络查找包。</li><li><code>--find-links=./packages</code>：指定本地包的路径。</li></ul><hr><h2 id="✅-三、生成-requirements-txt-文件-补充" tabindex="-1">✅ 三、生成 requirements.txt 文件（补充） <a class="header-anchor" href="#✅-三、生成-requirements-txt-文件-补充" aria-label="Permalink to &quot;✅ 三、生成 requirements.txt 文件（补充）&quot;">​</a></h2><p>如果你是项目的开发者，想要生成自己的 <code>requirements.txt</code> 文件，可以使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> freeze</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><blockquote><p>⚠️ 注意：<code>pip freeze</code> 会导出当前虚拟环境或全局环境中所有已安装的包，包括你可能不需要的依赖。建议使用虚拟环境（如 <code>venv</code>）开发项目。</p></blockquote><p>或者使用更精确的方式（推荐）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pipreqs</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipreqs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --encoding=utf8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><p>这个工具会根据你的代码实际使用的 import 包来生成 requirements。</p><hr><h2 id="✅-四、常见问题" tabindex="-1">✅ 四、常见问题 <a class="header-anchor" href="#✅-四、常见问题" aria-label="Permalink to &quot;✅ 四、常见问题&quot;">​</a></h2><h3 id="q-requirements-txt-格式是什么样的" tabindex="-1">Q: requirements.txt 格式是什么样的？ <a class="header-anchor" href="#q-requirements-txt-格式是什么样的" aria-label="Permalink to &quot;Q: requirements.txt 格式是什么样的？&quot;">​</a></h3><p>A: 示例内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>requests==2.31.0</span></span>\n<span class="line"><span>numpy&gt;=1.24.0</span></span>\n<span class="line"><span>pandas</span></span>\n<span class="line"><span>flask&gt;=2.0.0,&lt;3.0.0</span></span></code></pre></div><p>每行一个包名，可选指定版本号。</p><hr><h2 id="✅-总结" tabindex="-1">✅ 总结 <a class="header-anchor" href="#✅-总结" aria-label="Permalink to &quot;✅ 总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>安装 requirements</td><td><code>pip install -r requirements.txt</code></td></tr><tr><td>仅下载不安装</td><td><code>pip download -r requirements.txt -d ./packages</code></td></tr><tr><td>离线安装</td><td><code>pip install --no-index --find-links=./packages -r requirements.txt</code></td></tr><tr><td>生成 requirements.txt</td><td><code>pip freeze &gt; requirements.txt</code> 或 <code>pipreqs .</code></td></tr></tbody></table><hr>',101)]))}const g=s(n,[["render",h]]);export{k as __pageData,g as default};
