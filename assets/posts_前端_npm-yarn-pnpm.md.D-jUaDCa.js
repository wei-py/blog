import{_ as s,c as a,o as n,ah as i}from"./chunks/framework.DEXV2HBK.js";const c=JSON.parse('{"title":"npm、yarn、pnpm","description":"npm、yarn、pnpm 的区别","frontmatter":{"title":"npm、yarn、pnpm","date":"2025-05-05T00:00:00.000Z","category":"前端","tags":["module","frondEnd","js","模块化"],"description":"npm、yarn、pnpm 的区别"},"headers":[],"relativePath":"posts/前端/npm-yarn-pnpm.md","filePath":"posts/前端/npm-yarn-pnpm.md"}'),d={name:"posts/前端/npm-yarn-pnpm.md"};function o(e,t,l,r,p,h){return n(),a("div",null,t[0]||(t[0]=[i(`<p><code>npm</code>、<code>Yarn</code> 和 <code>pnpm</code> 是前端生态中最主流的三大包管理工具，它们在安装行为、性能、功能设计上有显著差异。以下是它们的核心区别及安装行为参数的对比：</p><hr><h3 id="一、核心区别对比" tabindex="-1"><strong>一、核心区别对比</strong> <a class="header-anchor" href="#一、核心区别对比" aria-label="Permalink to &quot;**一、核心区别对比**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><strong>npm</strong></th><th><strong>Yarn</strong></th><th><strong>pnpm</strong></th></tr></thead><tbody><tr><td><strong>依赖存储方式</strong></td><td>扁平化结构（<code>node_modules</code> 嵌套）</td><td>扁平化结构（<code>node_modules</code> 嵌套）</td><td><strong>硬链接 + 内容寻址存储</strong></td></tr><tr><td><strong>安装速度</strong></td><td>较慢（依赖嵌套安装）</td><td>较快（缓存优化）</td><td><strong>极快（复用依赖文件）</strong></td></tr><tr><td><strong>磁盘空间占用</strong></td><td>较大（重复依赖）</td><td>较大（重复依赖）</td><td><strong>极小（依赖共享存储）</strong></td></tr><tr><td><strong>依赖解析算法</strong></td><td><code>node_modules</code> 树状结构</td><td><code>Plug&#39;n&#39;Play</code>（无需 <code>node_modules</code>）</td><td><code>content-addressable-store</code></td></tr><tr><td><strong>插件生态</strong></td><td>官方默认，生态最全</td><td>插件丰富（如 <code>Yarn Plugn&#39;Play</code>）</td><td>插件较少但逐步完善</td></tr><tr><td><strong>工作区（Monorepo）</strong></td><td>支持（<code>npm workspaces</code>）</td><td><strong>强支持（<code>Yarn Workspaces</code>）</strong></td><td><strong>强支持（<code>pnpm workspaces</code>）</strong></td></tr><tr><td><strong>安全性</strong></td><td>一般（依赖嵌套可能冲突）</td><td>较高（依赖隔离）</td><td><strong>极高（依赖严格隔离）</strong></td></tr></tbody></table><hr><h3 id="二、安装行为参数对比" tabindex="-1"><strong>二、安装行为参数对比</strong> <a class="header-anchor" href="#二、安装行为参数对比" aria-label="Permalink to &quot;**二、安装行为参数对比**&quot;">​</a></h3><h4 id="_1-基础安装命令" tabindex="-1">1. <strong>基础安装命令</strong> <a class="header-anchor" href="#_1-基础安装命令" aria-label="Permalink to &quot;1. **基础安装命令**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>操作</th><th>npm</th><th>Yarn</th><th>pnpm</th></tr></thead><tbody><tr><td>安装所有依赖</td><td><code>npm install</code></td><td><code>yarn install</code></td><td><code>pnpm install</code></td></tr><tr><td>安装单个包</td><td><code>npm install &lt;pkg&gt;</code></td><td><code>yarn add &lt;pkg&gt;</code></td><td><code>pnpm add &lt;pkg&gt;</code></td></tr><tr><td>安装开发依赖</td><td><code>npm install &lt;pkg&gt; -D</code></td><td><code>yarn add &lt;pkg&gt; -D</code></td><td><code>pnpm add &lt;pkg&gt; -D</code></td></tr><tr><td>全局安装</td><td><code>npm install &lt;pkg&gt; -g</code></td><td><code>yarn global add &lt;pkg&gt;</code></td><td><code>pnpm install &lt;pkg&gt; -g</code></td></tr><tr><td>精确版本安装</td><td><code>npm install &lt;pkg&gt; -E</code></td><td><code>yarn add &lt;pkg&gt; -E</code></td><td><code>pnpm add &lt;pkg&gt; -E</code></td></tr><tr><td>生产环境安装</td><td><code>npm install --production</code></td><td><code>yarn install --production</code></td><td><code>pnpm install --prod</code></td></tr></tbody></table><h4 id="_2-特性化安装参数" tabindex="-1">2. <strong>特性化安装参数</strong> <a class="header-anchor" href="#_2-特性化安装参数" aria-label="Permalink to &quot;2. **特性化安装参数**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>npm</th><th>Yarn</th><th>pnpm</th></tr></thead><tbody><tr><td><strong>并行下载依赖</strong></td><td>✅（npm 7+）</td><td>✅（默认）</td><td>✅（默认）</td></tr><tr><td><strong>缓存依赖</strong></td><td>✅（<code>~/.npm/_cacache</code>）</td><td>✅（<code>~/.yarn/cache</code>）</td><td>✅（<code>~/.pnpm-store</code>）</td></tr><tr><td><strong>依赖共享存储</strong></td><td>❌</td><td>❌</td><td>✅（硬链接复用文件）</td></tr><tr><td><strong>Plug&#39;n&#39;Play（PnP）</strong></td><td>❌</td><td>✅（Yarn 2+）</td><td>❌</td></tr><tr><td><strong>Workspaces 支持</strong></td><td>✅（npm 7+）</td><td>✅（Yarn 1+）</td><td>✅（pnpm 6+）</td></tr><tr><td><strong>依赖树扁平化</strong></td><td>✅（通过 <code>npm ls</code> 查看）</td><td>✅（通过 <code>yarn list</code>）</td><td>❌（依赖硬链接而非扁平化）</td></tr></tbody></table><hr><h3 id="三、关键差异详解" tabindex="-1"><strong>三、关键差异详解</strong> <a class="header-anchor" href="#三、关键差异详解" aria-label="Permalink to &quot;**三、关键差异详解**&quot;">​</a></h3><h4 id="_1-依赖存储机制" tabindex="-1">1. <strong>依赖存储机制</strong> <a class="header-anchor" href="#_1-依赖存储机制" aria-label="Permalink to &quot;1. **依赖存储机制**&quot;">​</a></h4><ul><li><p><strong>npm</strong>：</p><ul><li>使用 <code>node_modules</code> 嵌套结构（扁平化但可能存在重复依赖）。</li><li>例如：<code>react</code> 被多个包依赖时，每个子依赖都会复制一份。</li></ul></li><li><p><strong>Yarn</strong>：</p><ul><li>使用 <code>yarn cache</code> 缓存依赖，安装时从缓存提取。</li><li>支持 <code>Plug&#39;n&#39;Play</code>（PnP）模式：<strong>不生成 <code>node_modules</code></strong>，通过 <code>.pnp.js</code> 文件直接解析依赖路径（大幅提升安装速度）。</li></ul></li><li><p><strong>pnpm</strong>：</p><ul><li><strong>内容寻址存储</strong>（Content-Addressable Store）：所有依赖统一存储在 <code>~/.pnpm-store</code>。</li><li>通过 <strong>硬链接</strong>（Hard Links）复用依赖文件，磁盘空间占用仅为 npm/Yarn 的 <strong>1/20~1/50</strong>。</li></ul></li></ul><h4 id="_2-性能对比" tabindex="-1">2. <strong>性能对比</strong> <a class="header-anchor" href="#_2-性能对比" aria-label="Permalink to &quot;2. **性能对比**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>场景</th><th>npm</th><th>Yarn</th><th>pnpm</th></tr></thead><tbody><tr><td>初始安装速度</td><td>⏱️ 慢（依赖嵌套）</td><td>⏱️ 较快（缓存优化）</td><td>⏱️ <strong>极快（复用文件）</strong></td></tr><tr><td>重复安装速度</td><td>⏱️ 一般（依赖检查）</td><td>⏱️ 快（缓存命中）</td><td>⏱️ <strong>极速（硬链接复用）</strong></td></tr><tr><td>磁盘占用（100个依赖）</td><td>💾 500MB~1GB</td><td>💾 500MB~1GB</td><td>💾 <strong>20MB~50MB</strong></td></tr></tbody></table><h4 id="_3-monorepo-支持" tabindex="-1">3. <strong>Monorepo 支持</strong> <a class="header-anchor" href="#_3-monorepo-支持" aria-label="Permalink to &quot;3. **Monorepo 支持**&quot;">​</a></h4><ul><li><p><strong>npm Workspaces</strong>：</p><ul><li>配置简单（<code>package.json</code> 中声明 <code>workspaces</code> 字段），但功能有限。</li><li>示例：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p><strong>Yarn Workspaces</strong>：</p><ul><li>支持 <strong>跨包依赖</strong>（<code>workspace:*</code>），无需发布私有包。</li><li>示例：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p><strong>pnpm Workspaces</strong>：</p><ul><li>通过 <code>workspace:</code> 协议实现 <strong>零拷贝的本地依赖</strong>。</li><li>示例：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;my-utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:packages/utils&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul><h4 id="_4-安全性" tabindex="-1">4. <strong>安全性</strong> <a class="header-anchor" href="#_4-安全性" aria-label="Permalink to &quot;4. **安全性**&quot;">​</a></h4><ul><li><strong>npm</strong>：依赖嵌套可能导致 <strong>依赖冲突</strong> 或 <strong>恶意代码注入</strong>。</li><li><strong>Yarn</strong>：PnP 模式强制依赖隔离，避免未声明依赖被意外使用。</li><li><strong>pnpm</strong>：依赖严格隔离（每个包只能访问显式声明的依赖），<strong>安全性最高</strong>。</li></ul><hr><h3 id="四、安装行为参数差异" tabindex="-1"><strong>四、安装行为参数差异</strong> <a class="header-anchor" href="#四、安装行为参数差异" aria-label="Permalink to &quot;**四、安装行为参数差异**&quot;">​</a></h3><h4 id="_1-依赖版本解析" tabindex="-1">1. <strong>依赖版本解析</strong> <a class="header-anchor" href="#_1-依赖版本解析" aria-label="Permalink to &quot;1. **依赖版本解析**&quot;">​</a></h4><ul><li><p><strong>npm/Yarn</strong>：</p><ul><li>使用 <code>^</code> 和 <code>~</code> 控制版本范围（如 <code>react: ^18.2.0</code>）。</li><li>通过 <code>package-lock.json</code> 或 <code>yarn.lock</code> 固定依赖树。</li></ul></li><li><p><strong>pnpm</strong>：</p><ul><li>依赖版本由 <code>pnpm-lock.yaml</code> 固定，支持 <strong>严格版本控制</strong>（<code>--strict-peer-dependencies</code>）。</li></ul></li></ul><h4 id="_2-全局安装路径" tabindex="-1">2. <strong>全局安装路径</strong> <a class="header-anchor" href="#_2-全局安装路径" aria-label="Permalink to &quot;2. **全局安装路径**&quot;">​</a></h4><ul><li><p><strong>npm</strong>：</p><ul><li>默认路径：<code>/usr/local/lib/node_modules</code>（Unix）或 <code>%APPDATA%\\npm\\node_modules</code>（Windows）。</li></ul></li><li><p><strong>Yarn</strong>：</p><ul><li>全局安装路径：<code>~/.yarn/global/node_modules</code>。</li></ul></li><li><p><strong>pnpm</strong>：</p><ul><li>全局安装路径：<code>~/.pnpm-global/node_modules</code>。</li></ul></li></ul><h4 id="_3-自定义安装目录" tabindex="-1">3. <strong>自定义安装目录</strong> <a class="header-anchor" href="#_3-自定义安装目录" aria-label="Permalink to &quot;3. **自定义安装目录**&quot;">​</a></h4><ul><li><p><strong>npm</strong>：</p><ul><li>通过 <code>--prefix</code> 指定安装路径：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./custom-dir</span></span></code></pre></div></li></ul></li><li><p><strong>Yarn</strong>：</p><ul><li>支持 <code>-W</code> 参数在 Monorepo 中跨包安装：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -W</span></span></code></pre></div></li></ul></li><li><p><strong>pnpm</strong>：</p><ul><li>支持 <code>--filter</code> 过滤特定包安装：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workspace:my-package</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="五、如何选择" tabindex="-1"><strong>五、如何选择？</strong> <a class="header-anchor" href="#五、如何选择" aria-label="Permalink to &quot;**五、如何选择？**&quot;">​</a></h3><h4 id="选择-npm-的理由" tabindex="-1"><strong>选择 npm 的理由</strong>： <a class="header-anchor" href="#选择-npm-的理由" aria-label="Permalink to &quot;**选择 npm 的理由**：&quot;">​</a></h4><ul><li>官方默认工具，生态兼容性最好。</li><li>对简单项目或小型团队足够使用。</li><li>不需要优化磁盘空间或安装速度。</li></ul><h4 id="选择-yarn-的理由" tabindex="-1"><strong>选择 Yarn 的理由</strong>： <a class="header-anchor" href="#选择-yarn-的理由" aria-label="Permalink to &quot;**选择 Yarn 的理由**：&quot;">​</a></h4><ul><li>需要 <strong>Plug&#39;n&#39;Play</strong> 的极速安装体验。</li><li>大型 Monorepo 项目需要跨包依赖管理。</li><li>社区插件丰富（如 <code>Yarn Berry</code> 的 PnP 功能）。</li></ul><h4 id="选择-pnpm-的理由" tabindex="-1"><strong>选择 pnpm 的理由</strong>： <a class="header-anchor" href="#选择-pnpm-的理由" aria-label="Permalink to &quot;**选择 pnpm 的理由**：&quot;">​</a></h4><ul><li><strong>节省磁盘空间</strong>（适合 CI/CD 或容器化部署）。</li><li><strong>依赖严格隔离</strong>（避免未声明依赖导致的隐式引用）。</li><li>支持 <strong>零拷贝的本地依赖</strong>（Monorepo 开发更高效）。</li></ul><hr><h3 id="六、迁移建议" tabindex="-1"><strong>六、迁移建议</strong> <a class="header-anchor" href="#六、迁移建议" aria-label="Permalink to &quot;**六、迁移建议**&quot;">​</a></h3><ul><li><p><strong>从 npm 迁移到 pnpm</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自动导入 \`package-lock.json\` 中的依赖</span></span></code></pre></div></li><li><p><strong>从 Yarn 迁移到 pnpm</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自动导入 \`yarn.lock\` 中的依赖</span></span></code></pre></div></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>npm</strong>：官方默认，简单可靠，适合大多数项目。</li><li><strong>Yarn</strong>：适合需要极速安装和 Monorepo 的复杂项目。</li><li><strong>pnpm</strong>：<strong>磁盘空间敏感</strong> 和 <strong>依赖安全要求高</strong> 的首选工具。</li></ul><p>根据团队规模、项目复杂度和部署环境选择合适的工具，可以显著提升开发效率和构建性能。</p>`,43)]))}const k=s(d,[["render",o]]);export{c as __pageData,k as default};
