import{_ as o,c as t,o as c,ah as d}from"./chunks/framework.ptg7Kx6M.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/next/meta.md","filePath":"posts/next/meta.md"}'),i={name:"posts/next/meta.md"};function a(s,e,r,n,l,g){return c(),t("div",null,e[0]||(e[0]=[d('<p>好的，根据您提供的两份文档内容，我将对 Next.js 中基于文件的元数据（Metadata）配置进行总结。</p><p>这两份文档内容实际上是重复的，都详细介绍了 Next.js 应用中通过<strong>创建特定文件</strong>的方式来配置元数据。这与在 <code>layout.js</code> 或 <code>page.js</code> 中导出 <code>metadata</code> 对象或 <code>generateMetadata</code> 函数的“基于配置”方式相对。</p><p>以下是核心内容的总结：</p><h3 id="核心概念" tabindex="-1"><strong>核心概念</strong> <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;**核心概念**&quot;">​</a></h3><p>Next.js 允许通过在 <code>app/</code> 目录下创建约定名称的特殊文件，来自动注入 HTML <code>&lt;head&gt;</code> 标签中的元数据或提供特定的资源文件（如 sitemap.xml）。</p><hr><h3 id="_1-应用图标-app-icons" tabindex="-1"><strong>1. 应用图标 (App Icons)</strong> <a class="header-anchor" href="#_1-应用图标-app-icons" aria-label="Permalink to &quot;**1. 应用图标 (App Icons)**&quot;">​</a></h3><p>用于设置浏览器标签页、收藏夹、移动设备主屏幕等场景的图标。</p><ul><li><p><strong><code>favicon.ico</code> (静态文件)</strong></p><ul><li><strong>文件名</strong>: <code>favicon.ico</code></li><li><strong>位置</strong>: 必须在 <code>app/</code> 目录的顶层。</li><li><strong>格式</strong>: <code>.ico</code></li><li><strong>作用</strong>: 设置通用图标，会生成 <code>&lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; sizes=&quot;any&quot; /&gt;</code>。它会应用到整个网站。</li></ul></li><li><p><strong><code>icon.*</code> (静态文件或代码生成)</strong></p><ul><li><strong>文件名</strong>: <code>icon.(ico|jpg|jpeg|png|svg)</code></li><li><strong>位置</strong>: 可以放在 <code>app/</code> 目录下的任意层级，实现更细粒度的控制。</li><li><strong>格式</strong>: 支持 <code>.ico</code>, <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.svg</code>。</li><li><strong>作用</strong>: 设置通用图标，会生成 <code>&lt;link rel=&quot;icon&quot; ... /&gt;</code> 标签。可以为不同路由设置不同的图标。</li></ul></li><li><p><strong><code>apple-icon.*</code> (静态文件或代码生成)</strong></p><ul><li><strong>文件名</strong>: <code>apple-icon.(jpg|jpeg|png)</code></li><li><strong>位置</strong>: 可以放在 <code>app/</code> 目录下的任意层级。</li><li><strong>格式</strong>: 支持 <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>。</li><li><strong>作用</strong>: 专门用于苹果设备（如 iPhone/iPad）将网页添加到主屏幕时的图标，会生成 <code>&lt;link rel=&quot;apple-touch-icon&quot; ... /&gt;</code> 标签。</li></ul></li><li><p><strong>使用代码生成图标</strong></p><ul><li>创建 <code>icon.js|ts|tsx</code> 或 <code>apple-icon.js|ts|tsx</code> 文件。</li><li>使用 <code>next/og</code> 包中的 <code>ImageResponse</code> API。</li><li>通过 JSX 和 CSS 动态生成图片。</li><li>可以导出 <code>size</code> 和 <code>contentType</code> 来指定图片元数据。</li><li>可以使用 <code>generateImageMetadata</code> 函数生成同一图片的多个版本（不同尺寸、颜色等），通过 <code>id</code> 参数区分。</li></ul></li></ul><hr><h3 id="_2-open-graph-和-twitter-图片-open-graph-twitter-images" tabindex="-1"><strong>2. Open Graph 和 Twitter 图片 (Open Graph &amp; Twitter Images)</strong> <a class="header-anchor" href="#_2-open-graph-和-twitter-图片-open-graph-twitter-images" aria-label="Permalink to &quot;**2. Open Graph 和 Twitter 图片 (Open Graph &amp; Twitter Images)**&quot;">​</a></h3><p>用于在社交媒体（如 Facebook, Twitter）分享链接时，显示精美的预览卡片。</p><ul><li><p><strong><code>opengraph-image.*</code> 和 <code>twitter-image.*</code> (静态文件)</strong></p><ul><li><strong>文件名</strong>: <code>opengraph-image.(jpg|jpeg|png|gif)</code> 或 <code>twitter-image.(jpg|jpeg|png|gif)</code></li><li><strong>格式</strong>: 支持 <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.gif</code>。</li><li><strong>作用</strong>: <ul><li><code>opengraph-image.*</code> 会生成 <code>og:image</code>, <code>og:image:width</code>, <code>og:image:height</code>, <code>og:image:type</code> 等 meta 标签。</li><li><code>twitter-image.*</code> 会生成 <code>twitter:image</code> 等 meta 标签。</li></ul></li></ul></li><li><p><strong><code>opengraph-image.alt.txt</code> 和 <code>twitter-image.alt.txt</code> (静态文本文件)</strong></p><ul><li><strong>文件名</strong>: <code>opengraph-image.alt.txt</code> 或 <code>twitter-image.alt.txt</code></li><li><strong>作用</strong>: 为对应的 Open Graph 或 Twitter 图片提供 <code>alt</code> 文本，会生成 <code>og:image:alt</code> 或 <code>twitter:image:alt</code> 标签。</li></ul></li><li><p><strong>使用代码生成图片</strong></p><ul><li>创建 <code>opengraph-image.js|ts|tsx</code> 或 <code>twitter-image.js|ts|tsx</code> 文件。</li><li>同样使用 <code>ImageResponse</code> API。</li><li>可以导出 <code>alt</code>, <code>size</code>, <code>contentType</code> 来指定图片元数据。</li><li>支持使用 <code>params</code> 获取动态路由参数，并能调用外部 API 获取数据（如文章标题）来动态生成图片内容。</li></ul></li></ul><hr><h3 id="_3-seo-和爬虫配置文件" tabindex="-1"><strong>3. SEO 和爬虫配置文件</strong> <a class="header-anchor" href="#_3-seo-和爬虫配置文件" aria-label="Permalink to &quot;**3. SEO 和爬虫配置文件**&quot;">​</a></h3><ul><li><p><strong><code>robots.txt</code></strong></p><ul><li><strong>静态文件</strong>: 在 <code>app/</code> 下创建 <code>robots.txt</code> 文件，直接编写规则。</li><li><strong>代码生成</strong>: 创建 <code>robots.js|ts</code> 文件，导出一个函数，返回一个包含 <code>rules</code> (User-Agent, Allow, Disallow), <code>sitemap</code>, <code>host</code> 等字段的对象。</li></ul></li><li><p><strong><code>sitemap.xml</code></strong></p><ul><li><strong>静态文件</strong>: 在 <code>app/</code> 下创建 <code>sitemap.xml</code> 文件，手动编写 XML 内容。</li><li><strong>代码生成</strong>: 创建 <code>sitemap.js|ts</code> 文件，导出一个函数，返回一个包含 <code>url</code>, <code>lastModified</code>, <code>changeFrequency</code>, <code>priority</code> 等字段的对象数组。Next.js 会自动将其序列化为正确的 XML 格式。</li></ul></li><li><p><strong><code>manifest.json</code></strong></p><ul><li><strong>静态文件</strong>: 在 <code>app/</code> 下创建 <code>manifest.json</code> 或 <code>manifest.webmanifest</code> 文件，编写 PWA (Progressive Web App) 所需的配置信息。</li><li><strong>代码生成</strong>: 创建 <code>manifest.js|ts</code> 文件，导出一个函数，返回一个包含 <code>name</code>, <code>short_name</code>, <code>icons</code>, <code>start_url</code>, <code>display</code> 等字段的 Manifest 对象。</li></ul></li></ul><hr><h3 id="总结要点" tabindex="-1"><strong>总结要点</strong> <a class="header-anchor" href="#总结要点" aria-label="Permalink to &quot;**总结要点**&quot;">​</a></h3><ol><li><strong>约定优于配置</strong>: Next.js 通过文件名和位置自动识别元数据类型。</li><li><strong>两种方式</strong>: 所有提到的元数据类型都支持<strong>静态文件</strong>和<strong>代码生成</strong>两种方式。</li><li><strong>动态能力</strong>: 代码生成方式（JS/TS 文件）提供了强大的动态能力，可以读取路由参数、调用 API、使用 <code>ImageResponse</code> 动态渲染图片。</li><li><strong><code>ImageResponse</code> 是关键</strong>: 它是动态生成图片的核心 API，基于 Vercel 的 Satori 库，允许使用 JSX 和 CSS。</li><li><strong><code>generateImageMetadata</code> 实现多图</strong>: 该函数可以为一个路由生成多个不同版本的图片（如不同尺寸的 icon 或多个 Open Graph 图片）。</li><li><strong><code>favicon.ico</code> 的特殊性</strong>: 它是唯一一个只能通过静态 <code>.ico</code> 文件配置，且必须位于顶层的图标。好的，根据您提供的两份文档内容，我将对 Next.js 中基于文件的元数据（Metadata）配置进行总结。</li></ol><p>这两份文档内容实际上是重复的，都详细介绍了 Next.js 应用中通过<strong>创建特定文件</strong>的方式来配置元数据。这与在 <code>layout.js</code> 或 <code>page.js</code> 中导出 <code>metadata</code> 对象或 <code>generateMetadata</code> 函数的“基于配置”方式相对。</p><p>以下是核心内容的总结：</p><h3 id="核心概念-1" tabindex="-1"><strong>核心概念</strong> <a class="header-anchor" href="#核心概念-1" aria-label="Permalink to &quot;**核心概念**&quot;">​</a></h3><p>Next.js 允许通过在 <code>app/</code> 目录下创建约定名称的特殊文件，来自动注入 HTML <code>&lt;head&gt;</code> 标签中的元数据或提供特定的资源文件（如 sitemap.xml）。</p><hr>',24)]))}const h=o(i,[["render",a]]);export{m as __pageData,h as default};
