import{_ as i,c as a,o as e,ah as t}from"./chunks/framework.ptg7Kx6M.js";const E=JSON.parse('{"title":"vue3 使用 proxy","description":"在 Vue 3.0 中，**使用 `Proxy` 是为了实现更强大、更高效的响应式系统（Reactivity System）**。相比 Vue 2.x 中使用的 `Object.defineProperty`，Vue 3 使用 `Proxy` 带来了许多关键性的改进。","frontmatter":{"title":"vue3 使用 proxy","date":"2025-05-03T00:00:00.000Z","category":"前端","tags":["frontEnd","vue3","proxy"],"description":"在 Vue 3.0 中，**使用 `Proxy` 是为了实现更强大、更高效的响应式系统（Reactivity System）**。相比 Vue 2.x 中使用的 `Object.defineProperty`，Vue 3 使用 `Proxy` 带来了许多关键性的改进。"},"headers":[],"relativePath":"posts/前端/vue3-proxy.md","filePath":"posts/前端/vue3-proxy.md"}'),n={name:"posts/前端/vue3-proxy.md"};function h(l,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="🧠-一、vue-3-为什么选择-proxy" tabindex="-1">🧠 一、Vue 3 为什么选择 Proxy？ <a class="header-anchor" href="#🧠-一、vue-3-为什么选择-proxy" aria-label="Permalink to &quot;🧠 一、Vue 3 为什么选择 Proxy？&quot;">​</a></h2><h3 id="_1-更全面的拦截能力" tabindex="-1">1. 更全面的拦截能力 <a class="header-anchor" href="#_1-更全面的拦截能力" aria-label="Permalink to &quot;1. 更全面的拦截能力&quot;">​</a></h3><p><code>Proxy</code> 是 ES6 提供的一种元编程特性，允许你对对象进行细粒度的操作拦截（如读取、写入、枚举、函数调用等）。 而 <code>Object.defineProperty</code> 只能拦截对象属性的 <strong>get 和 set 操作</strong>，功能非常有限。</p><blockquote><p>✅ <code>Proxy</code> 能监听更多操作：</p></blockquote><ul><li>属性新增/删除</li><li>数组索引修改</li><li>数组长度变化</li><li>对象方法调用</li><li>in、delete 等操作符</li></ul><hr><h3 id="_2-支持数组的响应式更新" tabindex="-1">2. 支持数组的响应式更新 <a class="header-anchor" href="#_2-支持数组的响应式更新" aria-label="Permalink to &quot;2. 支持数组的响应式更新&quot;">​</a></h3><p>在 Vue 2.x 中，由于 <code>Object.defineProperty</code> 无法直接监听数组下标的变化，因此需要通过重写数组的方法（如 <code>push</code>, <code>pop</code>, <code>splice</code> 等）来实现响应式更新。</p><p>而在 Vue 3 中，<code>Proxy</code> 可以直接监听数组索引和 length 的变化，无需重写数组方法，代码更简洁，逻辑也更清晰。</p><hr><h3 id="_3-更好的性能表现" tabindex="-1">3. 更好的性能表现 <a class="header-anchor" href="#_3-更好的性能表现" aria-label="Permalink to &quot;3. 更好的性能表现&quot;">​</a></h3><p>虽然 <code>Proxy</code> 在创建时会有一些开销，但它可以按需追踪依赖，不会像 Vue 2 那样对对象所有属性递归定义 getter/setter。 Vue 3 利用了 <code>Proxy</code> + <code>Reflect</code> 的组合，实现了更细粒度的依赖收集和更新触发，整体性能更优。</p><hr><h3 id="_4-更容易处理嵌套对象和动态属性" tabindex="-1">4. 更容易处理嵌套对象和动态属性 <a class="header-anchor" href="#_4-更容易处理嵌套对象和动态属性" aria-label="Permalink to &quot;4. 更容易处理嵌套对象和动态属性&quot;">​</a></h3><p>Vue 2 中如果给对象添加新属性，必须使用 <code>this.$set</code> 才能让它变成响应式的。 而 Vue 3 中使用 <code>Proxy</code> 后，<strong>新增或删除属性也能自动变为响应式</strong>，不再需要手动干预。</p><hr><h3 id="_5-支持-map、set-等复杂数据结构" tabindex="-1">5. 支持 Map、Set 等复杂数据结构 <a class="header-anchor" href="#_5-支持-map、set-等复杂数据结构" aria-label="Permalink to &quot;5. 支持 Map、Set 等复杂数据结构&quot;">​</a></h3><p>Vue 3 的响应式系统可以支持 <code>Map</code>、<code>Set</code>、<code>WeakMap</code>、<code>WeakSet</code> 等复杂数据结构，而 <code>Object.defineProperty</code> 根本不适用于这些类型。</p><hr><h2 id="🔁-二、对比总结-vue-2-vs-vue-3" tabindex="-1">🔁 二、对比总结：Vue 2 vs Vue 3 <a class="header-anchor" href="#🔁-二、对比总结-vue-2-vs-vue-3" aria-label="Permalink to &quot;🔁 二、对比总结：Vue 2 vs Vue 3&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Vue 2 (Object.defineProperty)</th><th>Vue 3 (Proxy)</th></tr></thead><tbody><tr><td>拦截能力</td><td>仅 get / set</td><td>支持多种操作（get, set, deleteProperty, has...）</td></tr><tr><td>数组响应式</td><td>需要重写数组方法</td><td>原生支持数组索引和 length</td></tr><tr><td>新增属性响应式</td><td>需要 <code>$set</code></td><td>自动响应</td></tr><tr><td>删除属性响应式</td><td>不易处理</td><td>支持自动追踪</td></tr><tr><td>支持的数据结构</td><td>仅普通对象和数组</td><td>支持 Map、Set、类等</td></tr><tr><td>性能</td><td>初始化慢，运行快</td><td>更灵活、更高效</td></tr></tbody></table><hr><h2 id="📌-三、示例说明" tabindex="-1">📌 三、示例说明 <a class="header-anchor" href="#📌-三、示例说明" aria-label="Permalink to &quot;📌 三、示例说明&quot;">​</a></h2><h3 id="vue-2-示例-object-defineproperty" tabindex="-1">Vue 2 示例（Object.defineProperty） <a class="header-anchor" href="#vue-2-示例-object-defineproperty" aria-label="Permalink to &quot;Vue 2 示例（Object.defineProperty）&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;访问了 count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count 被修改&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>缺点：只能监听已有属性，不能监听新增或删除的属性。</p><hr><h3 id="vue-3-示例-proxy" tabindex="-1">Vue 3 示例（Proxy） <a class="header-anchor" href="#vue-3-示例-proxy" aria-label="Permalink to &quot;Vue 3 示例（Proxy）&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`访问了 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, receiver);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`设置了 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, value, receiver);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.count; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问了 count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置了 count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.newKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置了 newKey（自动响应）</span></span></code></pre></div><p>优点：支持新增属性、数组、Map 等。</p><hr><h2 id="✅-四、小结" tabindex="-1">✅ 四、小结 <a class="header-anchor" href="#✅-四、小结" aria-label="Permalink to &quot;✅ 四、小结&quot;">​</a></h2><blockquote><p>Vue 3 使用 <code>Proxy</code> 替代 <code>Object.defineProperty</code>，是为了构建一个更强大、更灵活、更高效的响应式系统。</p></blockquote><p>主要优势包括：</p><ul><li>更强大的拦截能力</li><li>更自然地支持数组和动态属性</li><li>更好地支持现代 JS 数据结构（Map、Set）</li><li>减少 API 的侵入性（如不需要 <code>$set</code>）</li><li>更优雅的依赖追踪机制（配合 <code>effect</code> 和 <code>track</code>/<code>trigger</code>）</li></ul><hr><p>如果你对 Vue 3 的响应式原理感兴趣，也可以进一步了解其底层实现（比如 <code>reactive</code>、<code>ref</code>、<code>effect</code> 等 API），它们都基于 <code>Proxy</code> 实现了更加现代化的状态管理机制。</p>`,37)]))}const c=i(n,[["render",h]]);export{E as __pageData,c as default};
