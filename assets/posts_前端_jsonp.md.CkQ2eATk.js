import{_ as i,c as a,o as t,ah as n}from"./chunks/framework.DEXV2HBK.js";const o=JSON.parse('{"title":"JSONP","description":"","frontmatter":{"title":"JSONP","date":"2025-05-16T00:00:00.000Z","category":"frontEnd","tags":["jsonp","八股文"]},"headers":[],"relativePath":"posts/前端/jsonp.md","filePath":"posts/前端/jsonp.md"}'),h={name:"posts/前端/jsonp.md"};function l(p,s,k,e,d,E){return t(),a("div",null,s[0]||(s[0]=[n(`<p>JSONP（JSON with Padding）是一种<strong>跨域数据请求技术</strong>，用于解决浏览器的 <strong>同源策略（Same-Origin Policy）</strong> 所导致的跨域限制问题。虽然现在已经被 CORS（跨域资源共享）广泛取代，但在一些老旧系统或不支持 CORS 的浏览器中仍有使用价值。</p><hr><h2 id="一、jsonp-是什么" tabindex="-1">一、JSONP 是什么？ <a class="header-anchor" href="#一、jsonp-是什么" aria-label="Permalink to &quot;一、JSONP 是什么？&quot;">​</a></h2><p>JSONP 全称是 JSON with Padding，它不是一种正式的数据格式，而是一种“技巧”或“协议”。它的核心思想是：</p><blockquote><p>利用 <code>&lt;script&gt;</code> 标签不受同源策略限制的特点，动态加载一个外部脚本，并通过指定函数名回调的方式，把服务器返回的 JSON 数据包装在函数调用中执行。</p></blockquote><hr><h2 id="二、为什么使用-jsonp" tabindex="-1">二、为什么使用 JSONP？ <a class="header-anchor" href="#二、为什么使用-jsonp" aria-label="Permalink to &quot;二、为什么使用 JSONP？&quot;">​</a></h2><h3 id="原因-跨域请求" tabindex="-1">原因：跨域请求 <a class="header-anchor" href="#原因-跨域请求" aria-label="Permalink to &quot;原因：跨域请求&quot;">​</a></h3><p>浏览器出于安全考虑，默认不允许网页从不同域名、端口或协议请求资源（即“跨域”）。比如：</p><ul><li>当前页面是：<code>http://a.com</code></li><li>请求接口是：<code>http://b.com/api</code></li></ul><p>这时候如果使用 AJAX（XMLHttpRequest），就会被浏览器阻止，除非服务端开启 CORS 支持。</p><p>但如果服务端不支持 CORS，可以使用 JSONP 来绕过这个限制。</p><hr><h2 id="三、jsonp-的工作原理" tabindex="-1">三、JSONP 的工作原理 <a class="header-anchor" href="#三、jsonp-的工作原理" aria-label="Permalink to &quot;三、JSONP 的工作原理&quot;">​</a></h2><ol><li>客户端定义一个回调函数（callback function）。</li><li>动态创建 <code>&lt;script&gt;</code> 标签，src 指向目标 URL，并带上 callback 参数。</li><li>服务端收到请求后，返回一段 JavaScript 函数调用代码，参数就是 JSON 数据。</li><li>浏览器加载脚本并执行回调函数，完成数据传递。</li></ol><hr><h2 id="四、前端使用-jsonp-示例" tabindex="-1">四、前端使用 JSONP 示例 <a class="header-anchor" href="#四、前端使用-jsonp-示例" aria-label="Permalink to &quot;四、前端使用 JSONP 示例&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JSONP Example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JSONP Demo&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 定义回调函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;接收到数据:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.username);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 创建 script 标签</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://example.com/api?callback=handleResponse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="后端响应示例-php-示例" tabindex="-1">后端响应示例（PHP 示例）： <a class="header-anchor" href="#后端响应示例-php-示例" aria-label="Permalink to &quot;后端响应示例（PHP 示例）：&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 JSONP 格式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> json_encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre></div><p>输出结果为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><hr><h2 id="五、jsonp-的缺点和局限性" tabindex="-1">五、JSONP 的缺点和局限性 <a class="header-anchor" href="#五、jsonp-的缺点和局限性" aria-label="Permalink to &quot;五、JSONP 的缺点和局限性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>缺点</th><th>说明</th></tr></thead><tbody><tr><td>只支持 GET 请求</td><td>JSONP 本质是 <code>&lt;script&gt;</code> 标签加载，只能发送 GET 请求</td></tr><tr><td>安全隐患</td><td>如果服务端不可信，可能会注入恶意脚本</td></tr><tr><td>不易调试</td><td>错误处理不如 AJAX 直观</td></tr><tr><td>不推荐新项目使用</td><td>现代项目应优先使用 CORS</td></tr></tbody></table><hr><h2 id="六、与-cors-的区别" tabindex="-1">六、与 CORS 的区别 <a class="header-anchor" href="#六、与-cors-的区别" aria-label="Permalink to &quot;六、与 CORS 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>JSONP</th><th>CORS</th></tr></thead><tbody><tr><td>是否需要服务端配合</td><td>✅ 是</td><td>✅ 是</td></tr><tr><td>支持请求方法</td><td>❌ 仅 GET</td><td>✅ 多种（GET、POST 等）</td></tr><tr><td>浏览器兼容性</td><td>✅ 非常好（包括 IE）</td><td>✅ 现代浏览器支持良好</td></tr><tr><td>安全性</td><td>❌ 较差</td><td>✅ 更安全</td></tr><tr><td>推荐程度</td><td>⚠️ 已逐渐淘汰</td><td>✅ 推荐使用</td></tr></tbody></table><hr><h2 id="七、总结" tabindex="-1">七、总结 <a class="header-anchor" href="#七、总结" aria-label="Permalink to &quot;七、总结&quot;">​</a></h2><ul><li><strong>JSONP 是一种跨域通信技术</strong>，适用于不支持 CORS 的场景。</li><li>它利用了 <code>&lt;script&gt;</code> 标签可以跨域加载的特性。</li><li>使用时需要前后端配合，约定好回调函数名。</li><li>存在安全隐患，且只支持 GET 请求，因此不建议在新项目中使用。</li><li><strong>现代开发推荐使用 CORS 实现跨域请求。</strong></li></ul><hr><p>如需了解如何使用 <code>fetch</code> 或 <code>axios</code> 实现跨域请求，请告诉我，我可以继续为你介绍 CORS 的使用方式。</p>`,33)]))}const g=i(h,[["render",l]]);export{o as __pageData,g as default};
