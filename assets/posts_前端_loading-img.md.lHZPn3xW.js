import{_ as i,c as a,o as t,ah as n}from"./chunks/framework.DEXV2HBK.js";const g=JSON.parse('{"title":"图片的懒加载","description":"网站开发中, 实现图片的懒加载","frontmatter":{"title":"图片的懒加载","date":"2025-05-04T00:00:00.000Z","category":"前端","tags":["frontEnd","lazyLoad","img","optimize"],"description":"网站开发中, 实现图片的懒加载"},"headers":[],"relativePath":"posts/前端/loading-img.md","filePath":"posts/前端/loading-img.md"}'),l={name:"posts/前端/loading-img.md"};function h(e,s,r,k,p,o){return t(),a("div",null,s[0]||(s[0]=[n(`<p>图片懒加载（Lazy Load）是前端优化性能的重要手段，其核心思想是 <strong>延迟加载非关键区域的图片，直到用户滚动到对应位置</strong>。从最早的实现方式到现代浏览器原生支持，懒加载方案经历了多个阶段的演进。以下是按时间顺序和技术演进分类的常见方案：</p><hr><h2 id="_1-最早期-手动监听-scroll-事件-兼容性最好" tabindex="-1"><strong>1. 最早期：手动监听 <code>scroll</code> 事件（兼容性最好）</strong> <a class="header-anchor" href="#_1-最早期-手动监听-scroll-事件-兼容性最好" aria-label="Permalink to &quot;**1. 最早期：手动监听 \`scroll\` 事件（兼容性最好）**&quot;">​</a></h2><h3 id="原理" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>通过监听窗口的 <code>scroll</code> 事件，计算图片位置与视口的关系，动态设置 <code>&lt;img&gt;</code> 的 <code>src</code> 属性。</p><h3 id="代码示例" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> images</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img[data-src]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  images.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (img.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerHeight) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.dataset.src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scroll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyLoad);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOMContentLoaded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyLoad); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始加载</span></span></code></pre></div><h3 id="优点" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>兼容性极佳</strong>（支持所有浏览器，包括 IE）。</li><li><strong>无需依赖第三方库</strong>。</li></ul><h3 id="缺点" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>性能问题</strong>：频繁触发 <code>scroll</code> 事件可能导致页面卡顿（需防抖/节流优化）。</li><li><strong>计算复杂</strong>：需手动处理图片位置判断逻辑。</li></ul><hr><h2 id="_2-中期-使用-intersection-observer-api-现代主流方案" tabindex="-1"><strong>2. 中期：使用 <code>Intersection Observer API</code>（现代主流方案）</strong> <a class="header-anchor" href="#_2-中期-使用-intersection-observer-api-现代主流方案" aria-label="Permalink to &quot;**2. 中期：使用 \`Intersection Observer API\`（现代主流方案）**&quot;">​</a></h2><h3 id="原理-1" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理-1" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>通过浏览器原生的 <code>Intersection Observer</code> API 监听元素与视口的交集变化，异步高效地判断图片是否进入可视区域。</p><h3 id="代码示例-1" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例-1" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntersectionObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.dataset.src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unobserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载后停止监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { rootMargin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0px 0px 200px 0px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提前加载（可选）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img[data-src]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img));</span></span></code></pre></div><h3 id="优点-1" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>性能优秀</strong>：异步执行，不会阻塞主线程。</li><li><strong>简洁高效</strong>：无需手动计算位置，API 设计友好。</li><li><strong>支持提前加载</strong>：通过 <code>rootMargin</code> 设置预加载区域。</li></ul><h3 id="缺点-1" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>兼容性问题</strong>：IE 不支持，需引入 <a href="https://github.com/w3c/IntersectionObserver/tree/main/polyfill" target="_blank" rel="noreferrer">polyfill</a>（约 10KB）。</li><li><strong>Safari 旧版本兼容性</strong>：部分旧版本 Safari 需启用实验性功能。</li></ul><hr><h2 id="_3-原生-html-loading-lazy-最新原生支持" tabindex="-1"><strong>3. 原生 HTML <code>loading=&quot;lazy&quot;</code>（最新原生支持）</strong> <a class="header-anchor" href="#_3-原生-html-loading-lazy-最新原生支持" aria-label="Permalink to &quot;**3. 原生 HTML \`loading=&quot;lazy&quot;\`（最新原生支持）**&quot;">​</a></h2><h3 id="原理-2" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理-2" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>直接在 <code>&lt;img&gt;</code> 或 <code>&lt;iframe&gt;</code> 标签上使用 <code>loading=&quot;lazy&quot;</code> 属性，由浏览器原生实现懒加载。</p><h3 id="代码示例-2" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例-2" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;placeholder.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;real-image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;示例&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video.html&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="优点-2" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>零代码实现</strong>：无需 JavaScript，直接通过 HTML 属性控制。</li><li><strong>性能最优</strong>：由浏览器底层优化，效率高于 JavaScript 实现。</li><li><strong>自动管理</strong>：浏览器自动处理加载时机（如网络状况、设备性能）。</li></ul><h3 id="缺点-2" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>兼容性限制</strong>： <ul><li>支持的浏览器：Chrome 76+、Edge 18+、Firefox 65+、Safari 15.4+。</li><li>不支持 IE 和部分旧版移动端浏览器。</li></ul></li><li><strong>可控性低</strong>：无法自定义加载逻辑（如占位符、错误处理）。</li></ul><hr><h2 id="_4-第三方库封装-如-lazysizes、lozad-js" tabindex="-1"><strong>4. 第三方库封装（如 <code>lazysizes</code>、<code>lozad.js</code>）</strong> <a class="header-anchor" href="#_4-第三方库封装-如-lazysizes、lozad-js" aria-label="Permalink to &quot;**4. 第三方库封装（如 \`lazysizes\`、\`lozad.js\`）**&quot;">​</a></h2><h3 id="原理-3" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理-3" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>基于 <code>Intersection Observer</code> 或 <code>scroll</code> 事件封装的成熟库，提供更丰富的功能（如响应式图片、背景图懒加载）。</p><h3 id="常用库" tabindex="-1"><strong>常用库</strong> <a class="header-anchor" href="#常用库" aria-label="Permalink to &quot;**常用库**&quot;">​</a></h3><ul><li><strong><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="noreferrer">lazysizes</a></strong>：功能全面，支持 <code>&lt;img&gt;</code>、<code>&lt;picture&gt;</code>、<code>&lt;iframe&gt;</code>、CSS 背景图等。</li><li><strong><a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noreferrer">lozad.js</a></strong>：轻量级，基于 <code>Intersection Observer</code>。</li></ul><h3 id="代码示例-lazysizes" tabindex="-1"><strong>代码示例（lazysizes）</strong> <a class="header-anchor" href="#代码示例-lazysizes" aria-label="Permalink to &quot;**代码示例（lazysizes）**&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazyload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;示例&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazysizes.min.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="优点-3" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>功能丰富</strong>：支持响应式图片（<code>srcset</code>）、背景图、视频等。</li><li><strong>兼容性好</strong>：多数库自带 polyfill。</li><li><strong>开箱即用</strong>：少量代码即可实现复杂功能。</li></ul><h3 id="缺点-3" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>依赖第三方库</strong>：增加项目体积。</li><li><strong>配置复杂度</strong>：需学习库的特定语法。</li></ul><hr><h2 id="_5-vue-react-等框架专用方案" tabindex="-1"><strong>5. Vue/React 等框架专用方案</strong> <a class="header-anchor" href="#_5-vue-react-等框架专用方案" aria-label="Permalink to &quot;**5. Vue/React 等框架专用方案**&quot;">​</a></h2><h3 id="原理-4" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理-4" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>在框架中封装懒加载逻辑，结合生命周期钩子或自定义指令实现。</p><h3 id="vue-示例-自定义指令" tabindex="-1"><strong>Vue 示例（自定义指令）</strong> <a class="header-anchor" href="#vue-示例-自定义指令" aria-label="Permalink to &quot;**Vue 示例（自定义指令）**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue3 组合式 API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntersectionObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.dataset.src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ src: &#39;image.jpg&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h3 id="优点-4" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>与框架深度集成</strong>：利用响应式系统管理状态。</li><li><strong>可扩展性强</strong>：支持自定义占位符、加载动画等。</li></ul><h3 id="缺点-4" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点-4" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>仅适用于特定框架</strong>。</li><li><strong>需手动维护逻辑</strong>（除非使用成熟插件）。</li></ul><hr><h2 id="_6-css-背景图-intersection-observer" tabindex="-1"><strong>6. CSS 背景图 + <code>Intersection Observer</code></strong> <a class="header-anchor" href="#_6-css-背景图-intersection-observer" aria-label="Permalink to &quot;**6. CSS 背景图 + \`Intersection Observer\`**&quot;">​</a></h2><h3 id="原理-5" tabindex="-1"><strong>原理</strong> <a class="header-anchor" href="#原理-5" aria-label="Permalink to &quot;**原理**&quot;">​</a></h3><p>将图片作为 CSS 背景图，通过 JavaScript 动态修改样式加载。</p><h3 id="代码示例-3" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例-3" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy-bg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-bg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.lazy-bg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Intersection Observer 回调中：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.style.backgroundImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`url(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="优点-5" tabindex="-1"><strong>优点</strong> <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;**优点**&quot;">​</a></h3><ul><li><strong>灵活控制样式</strong>：可配合 CSS 实现渐变加载效果。</li><li><strong>适用于复杂布局</strong>。</li></ul><h3 id="缺点-5" tabindex="-1"><strong>缺点</strong> <a class="header-anchor" href="#缺点-5" aria-label="Permalink to &quot;**缺点**&quot;">​</a></h3><ul><li><strong>语义化差</strong>：不利于 SEO 和无障碍访问。</li><li><strong>实现复杂度较高</strong>。</li></ul><hr><h2 id="方案对比与选择建议" tabindex="-1"><strong>方案对比与选择建议</strong> <a class="header-anchor" href="#方案对比与选择建议" aria-label="Permalink to &quot;**方案对比与选择建议**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方案</th><th>兼容性</th><th>性能</th><th>可控性</th><th>推荐使用场景</th></tr></thead><tbody><tr><td><strong>scroll 事件监听</strong></td><td>✅✅✅</td><td>❌</td><td>✅</td><td>需兼容 IE 的旧项目</td></tr><tr><td><strong>Intersection Observer</strong></td><td>✅（需 polyfill）</td><td>✅✅✅</td><td>✅✅</td><td>现代项目首选</td></tr><tr><td><strong>loading=&quot;lazy&quot;</strong></td><td>❌</td><td>✅✅✅</td><td>❌</td><td>简单场景，且无需兼容旧浏览器</td></tr><tr><td><strong>第三方库（如 lazysizes）</strong></td><td>✅✅</td><td>✅✅</td><td>✅✅✅</td><td>需要响应式图片、背景图等复杂功能</td></tr><tr><td><strong>框架专用方案</strong></td><td>❌</td><td>✅✅</td><td>✅✅✅</td><td>Vue/React 等现代框架项目</td></tr><tr><td><strong>CSS 背景图方案</strong></td><td>✅✅</td><td>✅✅</td><td>❌</td><td>特殊视觉效果需求（如视差滚动）</td></tr></tbody></table><hr><h2 id="最佳实践" tabindex="-1"><strong>最佳实践</strong> <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;**最佳实践**&quot;">​</a></h2><ol><li><strong>现代项目</strong>：优先使用 <code>loading=&quot;lazy&quot;</code> + <code>Intersection Observer</code>（作为降级方案）。</li><li><strong>兼容性要求高</strong>：使用 <code>lazysizes</code> 或带 polyfill 的 <code>Intersection Observer</code>。</li><li><strong>框架项目</strong>：结合框架特性封装自定义指令或组件。</li><li><strong>响应式图片</strong>：搭配 <code>srcset</code> 和 <code>sizes</code> 属性实现多分辨率适配。</li></ol><p>通过合理选择方案，可以在性能、兼容性和开发效率之间找到平衡点。</p>`,72)]))}const E=i(l,[["render",h]]);export{g as __pageData,E as default};
