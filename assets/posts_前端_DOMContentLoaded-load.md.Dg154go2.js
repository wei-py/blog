import{_ as t,c as a,o as i,ah as n}from"./chunks/framework.Dtp82s2t.js";const E=JSON.parse('{"title":"DOMContentLoaded 和 load 事件的区别","description":"","frontmatter":{"title":"DOMContentLoaded 和 load 事件的区别","date":"2025-05-05T00:00:00.000Z","category":["浏览器事件对比"],"tags":["对比","前端"]},"headers":[],"relativePath":"posts/前端/DOMContentLoaded-load.md","filePath":"posts/前端/DOMContentLoaded-load.md"}'),e={name:"posts/前端/DOMContentLoaded-load.md"};function d(h,s,l,o,k,r){return i(),a("div",null,s[0]||(s[0]=[n(`<p><code>DOMContentLoaded</code> 和 <code>load</code> 是网页加载过程中两个关键的事件，它们的主要区别在于 <strong>触发时机</strong> 和 <strong>适用场景</strong>：</p><hr><h3 id="_1-触发时机" tabindex="-1"><strong>1. 触发时机</strong> <a class="header-anchor" href="#_1-触发时机" aria-label="Permalink to &quot;**1. 触发时机**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件</th><th>触发条件</th></tr></thead><tbody><tr><td><code>DOMContentLoaded</code></td><td>当 HTML 文档被完全解析并构建完 DOM 树（无需等待样式表、图片、子框架加载）时触发。</td></tr><tr><td><code>load</code></td><td>当整个页面的所有资源（包括 HTML、CSS、图片、子框架等）全部加载完成后触发。</td></tr></tbody></table><hr><h3 id="_2-使用场景" tabindex="-1"><strong>2. 使用场景</strong> <a class="header-anchor" href="#_2-使用场景" aria-label="Permalink to &quot;**2. 使用场景**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件</th><th>适用场景</th></tr></thead><tbody><tr><td><code>DOMContentLoaded</code></td><td>需要尽早操作 DOM 元素（无需等待资源加载），例如绑定事件、初始化界面布局。</td></tr><tr><td><code>load</code></td><td>需要确保所有资源（如图片尺寸、字体、视频）加载完成后再执行操作，例如计算图片尺寸、启动动画。</td></tr></tbody></table><hr><h3 id="_3-示例对比" tabindex="-1"><strong>3. 示例对比</strong> <a class="header-anchor" href="#_3-示例对比" aria-label="Permalink to &quot;**3. 示例对比**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOMContentLoaded：DOM 可用时立即执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOMContentLoaded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOM 已解析，但图片可能未加载&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此时可以安全操作 DOM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// load：所有资源加载完成后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;load&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;所有资源（包括图片）已加载完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此时可以安全访问图片尺寸等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myImage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;图片宽度:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, image.width);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h3 id="_4-文档加载状态-document-readystate" tabindex="-1"><strong>4. 文档加载状态（<code>document.readyState</code>）</strong> <a class="header-anchor" href="#_4-文档加载状态-document-readystate" aria-label="Permalink to &quot;**4. 文档加载状态（\`document.readyState\`）**&quot;">​</a></h3><ul><li><strong><code>loading</code></strong>：文档正在加载。</li><li><strong><code>interactive</code></strong>：文档解析完成（触发 <code>DOMContentLoaded</code>）。</li><li><strong><code>complete</code></strong>：所有资源加载完成（触发 <code>load</code>）。</li></ul><hr><h3 id="_5-关键区别总结" tabindex="-1"><strong>5. 关键区别总结</strong> <a class="header-anchor" href="#_5-关键区别总结" aria-label="Permalink to &quot;**5. 关键区别总结**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><code>DOMContentLoaded</code></th><th><code>load</code></th></tr></thead><tbody><tr><td>触发时间</td><td>DOM 解析完成，不依赖外部资源</td><td>所有资源（含图片等）加载完成</td></tr><tr><td>是否等待外部资源</td><td>❌ 不等待（样式表、图片等可能未加载）</td><td>✅ 等待所有资源加载完成</td></tr><tr><td>适用场景</td><td>早期 DOM 操作、提升性能</td><td>依赖完整资源的场景（如绘图）</td></tr><tr><td>事件目标</td><td><code>document</code></td><td><code>window</code></td></tr></tbody></table><hr><h3 id="_6-实际应用建议" tabindex="-1"><strong>6. 实际应用建议</strong> <a class="header-anchor" href="#_6-实际应用建议" aria-label="Permalink to &quot;**6. 实际应用建议**&quot;">​</a></h3><ul><li>如果需要尽快操作 DOM（例如绑定点击事件或修改结构），使用 <code>DOMContentLoaded</code>。</li><li>如果需要依赖图片或外部资源（例如计算布局、绘制 Canvas），使用 <code>load</code>。</li><li>对于异步加载的脚本（如 <code>async</code> 或 <code>defer</code>），<code>DOMContentLoaded</code> 可能会早于脚本执行，需注意依赖关系。</li></ul><p>通过合理选择这两个事件，可以优化网页性能并避免资源未加载导致的错误。</p>`,20)]))}const c=t(e,[["render",d]]);export{E as __pageData,c as default};
