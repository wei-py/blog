import{_ as s,c as t,o as a,ah as e}from"./chunks/framework.Dtp82s2t.js";const c=JSON.parse('{"title":"事件坐标","description":"事件坐标","frontmatter":{"title":"事件坐标","date":"2025-05-03T00:00:00.000Z","category":"前端","tags":["frontEnd"],"description":"事件坐标"},"headers":[],"relativePath":"posts/前端/eventXY.md","filePath":"posts/前端/eventXY.md"}'),n={name:"posts/前端/eventXY.md"};function l(h,i,d,p,k,r){return a(),t("div",null,i[0]||(i[0]=[e(`<h2 id="事件坐标属性" tabindex="-1">事件坐标属性 <a class="header-anchor" href="#事件坐标属性" aria-label="Permalink to &quot;事件坐标属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>border</th><th>滚动条</th><th>描述</th></tr></thead><tbody><tr><td>clientXY</td><td>不包含</td><td>不包含</td><td>相对于浏览器可视区域的坐标，不包括边框和滚动条</td></tr><tr><td>offsetXY</td><td>包含</td><td>不包含</td><td>相对于目标元素的坐标，包括边框</td></tr><tr><td>pageXY</td><td>包含</td><td>包含</td><td>相对于整个文档的坐标，包括滚动部分</td></tr><tr><td>screenXY</td><td>包含</td><td>包含</td><td>相对于屏幕的坐标</td></tr></tbody></table><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><code>clientXY</code>: 适用于需要相对于视口位置的操作，如固定定位元素</li><li><code>offsetXY</code>: 适用于元素内部交互，如拖拽组件</li><li><code>pageXY</code>: 适用于需要考虑页面滚动的情况，如无限滚动加载</li><li><code>screenXY</code>: 适用于需要与屏幕物理坐标交互的场景，如全屏应用</li></ul><h2 id="元素尺寸属性" tabindex="-1">元素尺寸属性 <a class="header-anchor" href="#元素尺寸属性" aria-label="Permalink to &quot;元素尺寸属性&quot;">​</a></h2><h3 id="尺寸关系" tabindex="-1">尺寸关系 <a class="header-anchor" href="#尺寸关系" aria-label="Permalink to &quot;尺寸关系&quot;">​</a></h3><ul><li>如果一个元素没有滚动条，那么它的 <code>scrollWidth</code> 和 <code>clientWidth</code> 应该是相等的，<code>scrollHeight</code> 和 <code>clientHeight</code> 也相等</li><li><code>offsetWidth</code> 和 <code>clientWidth</code> 相比，<code>offsetWidth</code> 还包含了 <code>border</code></li><li><code>offsetHeight</code> 和 <code>clientHeight</code> 相比，<code>offsetHeight</code> 也包含了 <code>border</code></li></ul><h3 id="尺寸属性对比" tabindex="-1">尺寸属性对比 <a class="header-anchor" href="#尺寸属性对比" aria-label="Permalink to &quot;尺寸属性对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>content</th><th>padding</th><th>border</th><th>滚动条</th></tr></thead><tbody><tr><td>clientWidth/Height</td><td>包含</td><td>包含</td><td>不包含</td><td>不包含</td></tr><tr><td>offsetWidth/Height</td><td>包含</td><td>包含</td><td>包含</td><td>不包含</td></tr><tr><td>scrollWidth/Height</td><td>包含</td><td>包含</td><td>不包含</td><td>包含内容溢出部分</td></tr></tbody></table><h3 id="计算公式" tabindex="-1">计算公式 <a class="header-anchor" href="#计算公式" aria-label="Permalink to &quot;计算公式&quot;">​</a></h3><ul><li><code>offsetWidth = width + padding-left + padding-right + border-left + border-right</code></li><li><code>offsetHeight = height + padding-top + padding-bottom + border-top + border-bottom</code></li><li><code>clientWidth = width + padding-left + padding-right</code></li><li><code>clientHeight = height + padding-top + padding-bottom</code></li><li><code>scrollWidth = 实际内容宽度（包括溢出部分）+ padding-left + padding-right</code></li><li><code>scrollHeight = 实际内容高度（包括溢出部分）+ padding-top + padding-bottom</code></li></ul><h3 id="获取元素位置" tabindex="-1">获取元素位置 <a class="header-anchor" href="#获取元素位置" aria-label="Permalink to &quot;获取元素位置&quot;">​</a></h3><ul><li><code>element.getBoundingClientRect()</code>: 返回元素相对于视口的位置信息，包括 top、right、bottom、left、width、height 等属性</li><li><code>element.offsetLeft/offsetTop</code>: 返回元素相对于 offsetParent 的左/上偏移量</li><li><code>element.scrollLeft/scrollTop</code>: 元素内容的水平/垂直滚动像素数</li></ul><h2 id="实际应用示例" tabindex="-1">实际应用示例 <a class="header-anchor" href="#实际应用示例" aria-label="Permalink to &quot;实际应用示例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素在页面中的绝对位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getElementPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (el) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.offsetLeft;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.offsetTop;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.offsetParent;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { left, top };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断元素是否在视口中可见</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isElementInViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rect.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rect.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rect.bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.innerHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientHeight) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rect.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.innerWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><blockquote><p><a href="https://github.com/niexia/niexia.github.io/issues/41" target="_blank" rel="noreferrer">https://github.com/niexia/niexia.github.io/issues/41</a></p></blockquote>`,17)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
