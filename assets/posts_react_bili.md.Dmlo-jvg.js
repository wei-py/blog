import{_ as i,c as e,o as t,ah as a}from"./chunks/framework.ptg7Kx6M.js";const h=JSON.parse('{"title":"react hooks","description":"","frontmatter":{"title":"react hooks","date":"2025-08-25T00:00:00.000Z","category":"react","tags":["react","hooks"]},"headers":[],"relativePath":"posts/react/bili.md","filePath":"posts/react/bili.md"}'),o={name:"posts/react/bili.md"};function s(r,l,u,c,n,d){return t(),e("div",null,l[0]||(l[0]=[a('<h1 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h1><h2 id="vidoe" tabindex="-1">vidoe <a class="header-anchor" href="#vidoe" aria-label="Permalink to &quot;vidoe&quot;">​</a></h2><ul><li><a href="https://www.bilibili.com/video/BV1vqoVY5ELc" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1vqoVY5ELc</a></li></ul><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><ul><li>compoenents</li><li>tsx</li><li>props</li><li>children</li><li>key</li><li>virtual dom <ul><li>update dom</li><li>diffs</li><li>reconciliation</li></ul></li><li>events</li><li>state <ul><li>useState <ul><li>controlled components</li></ul></li><li>useReducer</li><li>useContext</li><li>useRef</li><li>useEffect</li><li>useMemo</li><li>useCallback</li><li>useLayoutEffect</li></ul></li><li>purity</li><li>strict mode</li><li>portals</li><li>suspense</li><li>ErrorBoundary</li></ul><h2 id="钩子" tabindex="-1">钩子 <a class="header-anchor" href="#钩子" aria-label="Permalink to &quot;钩子&quot;">​</a></h2><ul><li><p>state management</p><ul><li>useState // 状态</li><li>useReducer // 用户交互频繁</li><li>useSyncExternalStore // 状态管理库</li></ul></li><li><p>Effect hooks</p><ul><li>useEffect // 绘制 ui 后进行 异步</li><li>useLayoutEffect // 绘制 ui 前进行 同步 ps: 获取 dom 高度等</li><li>useInsertionEffect // css js</li></ul></li><li><p>ref hook</p><ul><li>useRef</li><li>useImperativeHandle</li></ul></li><li><p>Performance hooks</p><ul><li>useMemo // 只有在依赖性变化时重新渲染 缓存值 ps: 计算数字的总和</li><li>useCallback // 缓存函数</li></ul></li><li><p>context hook</p><ul><li>useContext // 读取上下文值</li></ul></li><li><p>Transition hooks</p><ul><li>useTransition // ps: 过滤列表</li><li>useDeferredValue</li></ul></li><li><p>random hooks</p><ul><li>useDebugValue</li><li>useId</li></ul></li><li><p>19 hooks</p><ul><li>useFormStatus</li><li>useFormState</li><li>useOptimistic</li><li>use</li></ul></li></ul>',7)]))}const f=i(o,[["render",s]]);export{h as __pageData,f as default};
