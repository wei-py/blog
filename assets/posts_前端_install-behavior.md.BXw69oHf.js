import{_ as i,c as e,o as a,ah as t}from"./chunks/framework.Dtp82s2t.js";const g=JSON.parse('{"title":"安装行为","description":"npm 安装行为的区别","frontmatter":{"title":"安装行为","date":"2025-05-05T00:00:00.000Z","category":"前端","tags":["module","frondEnd","js","模块化"],"description":"npm 安装行为的区别"},"headers":[],"relativePath":"posts/前端/install-behavior.md","filePath":"posts/前端/install-behavior.md"}'),n={name:"posts/前端/install-behavior.md"};function l(o,s,d,h,p,r){return a(),e("div",null,s[0]||(s[0]=[t('<p>在使用 <code>npm install</code> 安装包时，不同的安装模式（如 <code>--save-dev</code>、<code>--save</code>、<code>--global</code> 等）会影响包的存储位置、依赖类型和使用场景。以下是详细的对比和使用指南：</p><hr><h3 id="_1-save-默认行为" tabindex="-1"><strong>1. <code>--save</code>（默认行为）</strong> <a class="header-anchor" href="#_1-save-默认行为" aria-label="Permalink to &quot;**1. `--save`（默认行为）**&quot;">​</a></h3><ul><li><strong>作用</strong>：将包安装为 <strong>生产依赖</strong>（<code>dependencies</code>），并记录在 <code>package.json</code> 中。</li><li><strong>适用场景</strong>：项目运行时必须依赖的库（如 React、Vue、Express 等）。</li><li><strong>版本变化</strong>： <ul><li><strong>npm 5+</strong>：默认行为（无需显式添加 <code>--save</code>）。</li><li><strong>npm 5 前</strong>：必须手动添加 <code>--save</code> 才会写入 <code>package.json</code>。</li></ul></li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自动写入 dependencies</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 效果同上（兼容旧版本）</span></span></code></pre></div></li></ul><hr><h3 id="_2-save-dev-开发依赖" tabindex="-1"><strong>2. <code>--save-dev</code>（开发依赖）</strong> <a class="header-anchor" href="#_2-save-dev-开发依赖" aria-label="Permalink to &quot;**2. `--save-dev`（开发依赖）**&quot;">​</a></h3><ul><li><strong>作用</strong>：将包安装为 <strong>开发依赖</strong>（<code>devDependencies</code>），仅用于开发或构建阶段。</li><li><strong>适用场景</strong>：开发工具、测试框架、代码规范工具（如 Webpack、Jest、ESLint、Babel 等）。</li><li><strong>特点</strong>： <ul><li>生产环境部署时，通过 <code>npm install --production</code> 不会安装这些依赖。</li><li>减少生产环境依赖体积。</li></ul></li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简写：-D</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></li></ul><hr><h3 id="_3-save-optional-可选依赖" tabindex="-1"><strong>3. <code>--save-optional</code>（可选依赖）</strong> <a class="header-anchor" href="#_3-save-optional-可选依赖" aria-label="Permalink to &quot;**3. `--save-optional`（可选依赖）**&quot;">​</a></h3><ul><li><strong>作用</strong>：将包安装为 <strong>可选依赖</strong>（<code>optionalDependencies</code>）。</li><li><strong>适用场景</strong>：某些功能在没有该依赖时仍能正常运行（如 <code>fsevents</code> 在非 macOS 系统下可忽略）。</li><li><strong>特点</strong>： <ul><li>安装失败时不会中断整个流程。</li><li>优先级低于 <code>dependencies</code> 和 <code>devDependencies</code>。</li></ul></li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fsevents</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-optional</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简写：-O</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fsevents</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span></span></code></pre></div></li></ul><hr><h3 id="_4-save-peer-同伴依赖" tabindex="-1"><strong>4. <code>--save-peer</code>（同伴依赖）</strong> <a class="header-anchor" href="#_4-save-peer-同伴依赖" aria-label="Permalink to &quot;**4. `--save-peer`（同伴依赖）**&quot;">​</a></h3><ul><li><strong>作用</strong>：将包安装为 <strong>同伴依赖</strong>（<code>peerDependencies</code>）。</li><li><strong>适用场景</strong>：插件或库需要与主应用共享某个依赖的版本（如 React 插件需要指定兼容的 React 版本）。</li><li><strong>特点</strong>： <ul><li>不会自动安装，需开发者手动管理。</li><li>避免同一依赖的多个副本（解决版本冲突）。</li></ul></li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-redux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-peer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span></span></code></pre></div></li></ul><hr><h3 id="_5-全局安装-global-或-g" tabindex="-1"><strong>5. 全局安装 <code>--global</code>（或 <code>-g</code>）</strong> <a class="header-anchor" href="#_5-全局安装-global-或-g" aria-label="Permalink to &quot;**5. 全局安装 `--global`（或 `-g`）**&quot;">​</a></h3><ul><li><strong>作用</strong>：将包安装到系统全局路径，而非本地项目目录。</li><li><strong>适用场景</strong>：命令行工具（CLI）或全局可用的开发工具（如 <code>eslint</code>、<code>webpack</code>、<code>create-react-app</code>）。</li><li><strong>特点</strong>： <ul><li>所有项目均可使用。</li><li>需要管理员权限（Windows 可能需要 <code>sudo</code>）。</li></ul></li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span></code></pre></div></li></ul><hr><h3 id="_6-精确版本安装-save-exact-或-e" tabindex="-1"><strong>6. 精确版本安装 <code>--save-exact</code>（或 <code>-E</code>）</strong> <a class="header-anchor" href="#_6-精确版本安装-save-exact-或-e" aria-label="Permalink to &quot;**6. 精确版本安装 `--save-exact`（或 `-E`）**&quot;">​</a></h3><ul><li><strong>作用</strong>：安装时指定精确版本号（不加 <code>~</code> 或 <code>^</code>）。</li><li><strong>适用场景</strong>：需要严格控制依赖版本（避免自动升级导致兼容问题）。</li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简写：-E</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -E</span></span></code></pre></div><strong>结果</strong>：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;18.2.0&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="_7-生产环境安装-production" tabindex="-1"><strong>7. 生产环境安装 <code>--production</code></strong> <a class="header-anchor" href="#_7-生产环境安装-production" aria-label="Permalink to &quot;**7. 生产环境安装 `--production`**&quot;">​</a></h3><ul><li><strong>作用</strong>：安装依赖时跳过 <code>devDependencies</code>。</li><li><strong>适用场景</strong>：部署生产环境时减少依赖体积。</li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --production</span></span></code></pre></div></li></ul><hr><h3 id="_8-本地依赖安装-file-协议" tabindex="-1"><strong>8. 本地依赖安装 <code>file:</code> 协议</strong> <a class="header-anchor" href="#_8-本地依赖安装-file-协议" aria-label="Permalink to &quot;**8. 本地依赖安装 `file:` 协议**&quot;">​</a></h3><ul><li><strong>作用</strong>：安装本地文件路径的依赖（用于调试私有包）。</li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file:./my-local-package</span></span></code></pre></div></li></ul><hr><h3 id="_9-git-仓库安装" tabindex="-1"><strong>9. Git 仓库安装</strong> <a class="header-anchor" href="#_9-git-仓库安装" aria-label="Permalink to &quot;**9. Git 仓库安装**&quot;">​</a></h3><ul><li><strong>作用</strong>：直接从 Git 仓库安装包。</li><li><strong>示例</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/user/repo.git</span></span></code></pre></div></li></ul><hr><h3 id="依赖类型对比表" tabindex="-1"><strong>依赖类型对比表</strong> <a class="header-anchor" href="#依赖类型对比表" aria-label="Permalink to &quot;**依赖类型对比表**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>安装模式</th><th>依赖类型</th><th>是否生产环境使用</th><th>是否默认安装</th><th>示例工具</th></tr></thead><tbody><tr><td><code>--save</code></td><td><code>dependencies</code></td><td>✅</td><td>✅（npm 5+）</td><td>React、Vue、Express</td></tr><tr><td><code>--save-dev</code></td><td><code>devDependencies</code></td><td>❌</td><td>✅（需显式）</td><td>Webpack、Jest、ESLint</td></tr><tr><td><code>--save-optional</code></td><td><code>optionalDependencies</code></td><td>⚠️（可选）</td><td>✅（需显式）</td><td><code>fsevents</code></td></tr><tr><td><code>--save-peer</code></td><td><code>peerDependencies</code></td><td>⚠️（需主应用提供）</td><td>❌（需手动安装）</td><td>React 插件</td></tr><tr><td><code>--global</code></td><td>全局安装</td><td>✅（CLI 工具）</td><td>❌</td><td><code>eslint</code>、<code>create-react-app</code></td></tr></tbody></table><hr><h3 id="如何选择安装模式" tabindex="-1"><strong>如何选择安装模式？</strong> <a class="header-anchor" href="#如何选择安装模式" aria-label="Permalink to &quot;**如何选择安装模式？**&quot;">​</a></h3><ol><li><strong>生产依赖</strong>：用 <code>npm install package-name</code>（默认写入 <code>dependencies</code>）。</li><li><strong>开发工具</strong>：用 <code>npm install package-name -D</code>（写入 <code>devDependencies</code>）。</li><li><strong>全局工具</strong>：用 <code>npm install -g package-name</code>。</li><li><strong>严格版本控制</strong>：用 <code>npm install package-name -E</code>。</li></ol><hr><h3 id="常见问题" tabindex="-1"><strong>常见问题</strong> <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;**常见问题**&quot;">​</a></h3><ol><li><p><strong>为什么 <code>--save</code> 在 npm 5+ 是默认行为？</strong><br> 为了简化流程，避免忘记保存依赖到 <code>package.json</code>。</p></li><li><p><strong><code>devDependencies</code> 和 <code>dependencies</code> 的区别？</strong><br><code>devDependencies</code> 仅用于开发，生产环境通过 <code>--production</code> 忽略它们。</p></li><li><p><strong>如何查看已安装的依赖？</strong><br> 检查 <code>package.json</code> 中的 <code>dependencies</code>、<code>devDependencies</code> 等字段。</p></li></ol><hr><p>通过合理使用不同的安装模式，可以更好地管理项目的依赖关系，确保开发效率与生产环境的稳定性。</p>',39)]))}const k=i(n,[["render",l]]);export{g as __pageData,k as default};
