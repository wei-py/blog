import{_ as a,c as n,o as t,ah as l}from"./chunks/framework.ptg7Kx6M.js";const g=JSON.parse('{"title":"浏览器从输入url到显示页面的过程，其中发生了什么","description":"浏览器从输入 URL 到最终显示页面的过程是一个复杂且高度优化的流程，涉及多个阶段的协同工作。以下是详细拆解","frontmatter":{"title":"浏览器从输入url到显示页面的过程，其中发生了什么","date":"2025-05-05T00:00:00.000Z","category":"前端","tags":["frontEnd","dns","http","html","browser"],"description":"浏览器从输入 URL 到最终显示页面的过程是一个复杂且高度优化的流程，涉及多个阶段的协同工作。以下是详细拆解"},"headers":[],"relativePath":"posts/前端/browser-url.md","filePath":"posts/前端/browser-url.md"}'),i={name:"posts/前端/browser-url.md"};function o(e,s,r,p,h,d){return t(),n("div",null,s[0]||(s[0]=[l(`<p>浏览器从输入 URL 到最终显示页面的过程是一个复杂且高度优化的流程，涉及多个阶段的协同工作。以下是详细拆解：</p><hr><h3 id="_1-输入-url-并解析" tabindex="-1"><strong>1. 输入 URL 并解析</strong> <a class="header-anchor" href="#_1-输入-url-并解析" aria-label="Permalink to &quot;**1. 输入 URL 并解析**&quot;">​</a></h3><ul><li><strong>用户输入</strong>：在地址栏输入 <code>https://example.com</code> 或搜索关键词。</li><li><strong>浏览器解析 URL</strong>： <ul><li>提取协议（HTTP/HTTPS）、域名（<code>example.com</code>）、端口（默认 80/443）和路径（如 <code>/index.html</code>）。</li><li>检查缓存：浏览器会先查找本地缓存（如内存缓存、磁盘缓存）是否有该资源的副本。</li></ul></li></ul><hr><h3 id="_2-dns-解析-域名-→-ip-地址" tabindex="-1"><strong>2. DNS 解析：域名 → IP 地址</strong> <a class="header-anchor" href="#_2-dns-解析-域名-→-ip-地址" aria-label="Permalink to &quot;**2. DNS 解析：域名 → IP 地址**&quot;">​</a></h3><ul><li><strong>目的</strong>：将域名转换为服务器的 IP 地址。</li><li><strong>步骤</strong>： <ol><li><strong>浏览器缓存检查</strong>：是否有近期缓存的 DNS 记录。</li><li><strong>系统缓存检查</strong>：操作系统是否有缓存的 DNS 记录。</li><li><strong>路由器/ISP DNS 查询</strong>：向本地路由器或互联网服务提供商（ISP）的 DNS 服务器发起查询。</li><li><strong>根域名服务器</strong>：如果未找到，逐级查询顶级域（TLD）服务器（如 <code>.com</code>）和权威 DNS 服务器。</li></ol></li><li><strong>结果</strong>：获取目标服务器的 IP 地址（如 <code>93.184.216.34</code>）。</li></ul><hr><h3 id="_3-建立-tcp-连接-http-或-tls-握手-https" tabindex="-1"><strong>3. 建立 TCP 连接（HTTP）或 TLS 握手（HTTPS）</strong> <a class="header-anchor" href="#_3-建立-tcp-连接-http-或-tls-握手-https" aria-label="Permalink to &quot;**3. 建立 TCP 连接（HTTP）或 TLS 握手（HTTPS）**&quot;">​</a></h3><ul><li><strong>HTTP</strong>：通过 <strong>TCP 三次握手</strong> 建立与服务器的连接。</li><li><strong>HTTPS</strong>： <ol><li><strong>TLS 握手</strong>：协商加密协议（如 TLS 1.3）、交换密钥，确保通信安全。</li><li><strong>证书验证</strong>：浏览器验证服务器的 SSL/TLS 证书是否合法（由可信 CA 签发、未过期、域名匹配）。</li></ol></li></ul><hr><h3 id="_4-发起-http-请求" tabindex="-1"><strong>4. 发起 HTTP 请求</strong> <a class="header-anchor" href="#_4-发起-http-请求" aria-label="Permalink to &quot;**4. 发起 HTTP 请求**&quot;">​</a></h3><ul><li><strong>请求内容</strong>：浏览器发送 HTTP 请求报文，包含： <ul><li><strong>方法</strong>：GET、POST 等。</li><li><strong>请求头</strong>：Host、User-Agent、Accept-Language、Cookie 等元数据。</li><li><strong>请求体</strong>（仅 POST）：表单数据或 JSON。</li></ul></li><li><strong>示例请求</strong>：<div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Chrome/120</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> en-US</span></span></code></pre></div></li></ul><hr><h3 id="_5-服务器处理请求并返回响应" tabindex="-1"><strong>5. 服务器处理请求并返回响应</strong> <a class="header-anchor" href="#_5-服务器处理请求并返回响应" aria-label="Permalink to &quot;**5. 服务器处理请求并返回响应**&quot;">​</a></h3><ul><li><strong>服务器处理</strong>： <ul><li>接收请求后，服务器根据路径、参数等执行逻辑（如查询数据库、动态生成页面）。</li><li>生成响应报文，包含状态码（如 200 OK）、响应头（Content-Type、Set-Cookie）和响应体（HTML 内容）。</li></ul></li><li><strong>常见响应状态码</strong>： <ul><li><strong>200 OK</strong>：请求成功，返回资源。</li><li><strong>301/302 Redirect</strong>：重定向到新 URL。</li><li><strong>404 Not Found</strong>：资源不存在。</li><li><strong>500 Server Error</strong>：服务器内部错误。</li></ul></li></ul><hr><h3 id="_6-浏览器解析响应并构建渲染树" tabindex="-1"><strong>6. 浏览器解析响应并构建渲染树</strong> <a class="header-anchor" href="#_6-浏览器解析响应并构建渲染树" aria-label="Permalink to &quot;**6. 浏览器解析响应并构建渲染树**&quot;">​</a></h3><h4 id="_1-解析-html-构建-dom-树" tabindex="-1"><strong>(1) 解析 HTML，构建 DOM 树</strong> <a class="header-anchor" href="#_1-解析-html-构建-dom-树" aria-label="Permalink to &quot;**(1) 解析 HTML，构建 DOM 树**&quot;">​</a></h4><ul><li>浏览器逐行解析 HTML，将标签转换为 <strong>DOM 节点</strong>，形成 DOM 树。</li><li>遇到 <code>&lt;script&gt;</code> 标签时，默认会暂停 HTML 解析，下载并执行脚本（除非添加 <code>async</code> 或 <code>defer</code> 属性）。</li></ul><h4 id="_2-解析-css-构建-cssom" tabindex="-1"><strong>(2) 解析 CSS，构建 CSSOM</strong> <a class="header-anchor" href="#_2-解析-css-构建-cssom" aria-label="Permalink to &quot;**(2) 解析 CSS，构建 CSSOM**&quot;">​</a></h4><ul><li>下载并解析 CSS 文件，生成 <strong>CSS 规则树（CSSOM）</strong>。</li><li>CSS 是渲染阻塞资源，需等待 CSSOM 构建完成后才能进入下一步。</li></ul><h4 id="_3-合并-dom-和-cssom-生成渲染树" tabindex="-1"><strong>(3) 合并 DOM 和 CSSOM，生成渲染树</strong> <a class="header-anchor" href="#_3-合并-dom-和-cssom-生成渲染树" aria-label="Permalink to &quot;**(3) 合并 DOM 和 CSSOM，生成渲染树**&quot;">​</a></h4><ul><li>渲染树包含所有可见节点（如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>），但不包括隐藏元素（如 <code>display: none</code>）。</li></ul><h4 id="_4-布局-layout" tabindex="-1"><strong>(4) 布局（Layout）</strong> <a class="header-anchor" href="#_4-布局-layout" aria-label="Permalink to &quot;**(4) 布局（Layout）**&quot;">​</a></h4><ul><li>计算每个节点的几何位置和尺寸（如宽度、高度、位置）。</li><li>此过程也称为 <strong>重排（Reflow）</strong>。</li></ul><h4 id="_5-绘制-paint" tabindex="-1"><strong>(5) 绘制（Paint）</strong> <a class="header-anchor" href="#_5-绘制-paint" aria-label="Permalink to &quot;**(5) 绘制（Paint）**&quot;">​</a></h4><ul><li>将渲染树节点转换为像素，生成图层（Layer）。</li><li>包括绘制文本、颜色、边框、阴影等。</li></ul><h4 id="_6-合成-composite" tabindex="-1"><strong>(6) 合成（Composite）</strong> <a class="header-anchor" href="#_6-合成-composite" aria-label="Permalink to &quot;**(6) 合成（Composite）**&quot;">​</a></h4><ul><li>将多个图层合并为最终页面，提交给 GPU 渲染到屏幕上。</li></ul><hr><h3 id="_7-加载静态资源" tabindex="-1"><strong>7. 加载静态资源</strong> <a class="header-anchor" href="#_7-加载静态资源" aria-label="Permalink to &quot;**7. 加载静态资源**&quot;">​</a></h3><ul><li><strong>图片、视频、字体等</strong>：按需加载，可能触发多次 HTTP 请求。</li><li><strong>异步脚本</strong>：<code>&lt;script async&gt;</code> 或 <code>defer</code> 的脚本会并行加载，执行时机不同。</li></ul><hr><h3 id="_8-关键事件触发" tabindex="-1"><strong>8. 关键事件触发</strong> <a class="header-anchor" href="#_8-关键事件触发" aria-label="Permalink to &quot;**8. 关键事件触发**&quot;">​</a></h3><ul><li><strong>DOMContentLoaded</strong>：DOM 树构建完成，CSSOM 也已就绪，但图片等资源可能未加载。</li><li><strong>load</strong>：所有资源（包括图片、字体）加载完成，页面完全渲染。</li></ul><hr><h3 id="_9-页面交互" tabindex="-1"><strong>9. 页面交互</strong> <a class="header-anchor" href="#_9-页面交互" aria-label="Permalink to &quot;**9. 页面交互**&quot;">​</a></h3><ul><li>JavaScript 开始执行，绑定事件监听器（如点击、滚动）。</li><li>用户可以与页面交互（如填写表单、点击按钮）。</li></ul><hr><h3 id="_10-动态更新-可选" tabindex="-1"><strong>10. 动态更新（可选）</strong> <a class="header-anchor" href="#_10-动态更新-可选" aria-label="Permalink to &quot;**10. 动态更新（可选）**&quot;">​</a></h3><ul><li>通过 JavaScript 动态修改 DOM/CSSOM（如 AJAX 请求、前端框架更新）。</li><li>触发重新布局、绘制或合成（Reflow → Repaint → Composite）。</li></ul><hr><h3 id="关键性能优化点" tabindex="-1"><strong>关键性能优化点</strong> <a class="header-anchor" href="#关键性能优化点" aria-label="Permalink to &quot;**关键性能优化点**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>阶段</th><th>优化策略</th></tr></thead><tbody><tr><td>DNS 解析</td><td>使用 CDN、DNS 预解析（<code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code>）</td></tr><tr><td>TCP/TLS 连接</td><td>保持连接复用（HTTP/2、Keep-Alive）</td></tr><tr><td>请求/响应</td><td>减少请求体积（压缩、合并文件）、服务端缓存（ETag、Cache-Control）</td></tr><tr><td>渲染阻塞</td><td>异步加载 JS/CSS、内联关键 CSS</td></tr><tr><td>首屏加载</td><td>预加载关键资源（<code>&lt;link rel=&quot;preload&quot;&gt;</code>）、懒加载图片（<code>loading=&quot;lazy&quot;</code>）</td></tr></tbody></table><hr><h3 id="总结流程图" tabindex="-1"><strong>总结流程图</strong> <a class="header-anchor" href="#总结流程图" aria-label="Permalink to &quot;**总结流程图**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入 URL</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>DNS 解析 → 获取 IP</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>建立 TCP/TLS 连接</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>发送 HTTP 请求</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>服务器响应（HTML）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>解析 HTML → 构建 DOM</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>解析 CSS → 构建 CSSOM</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>生成渲染树</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>布局（Layout）→ 绘制（Paint）→ 合成（Composite）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>加载静态资源（图片、字体等）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>触发 DOMContentLoaded 和 load 事件</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>页面交互与动态更新</span></span></code></pre></div><p>通过理解这一流程，开发者可以针对性优化性能，例如减少关键渲染路径上的阻塞资源、利用浏览器缓存、使用异步加载等。</p>`,49)]))}const u=a(i,[["render",o]]);export{g as __pageData,u as default};
