import{_ as t,c as i,o as l,ah as o}from"./chunks/framework.ptg7Kx6M.js";const _=JSON.parse('{"title":"浏览器","description":"","frontmatter":{"title":"浏览器","date":"2025-07-09T00:00:00.000Z","category":"浏览器","tags":["距离","浏览器"]},"headers":[],"relativePath":"posts/前端/距离.md","filePath":"posts/前端/距离.md"}'),n={name:"posts/前端/距离.md"};function s(p,e,c,a,r,f){return l(),i("div",null,e[0]||(e[0]=[o("<p>getBoundingClientRect().top window.scrollY</p><p>pageY clientY offsetY</p><p>page client scroll offset screen inner</p><p>浏览器里计算位置、宽高、判断一些交互，都需要用到距离、宽高的属性。</p><p>这类属性比较多，我们整体过了一遍：</p><ul><li>e.pageY：鼠标距离文档顶部的距离</li><li>e.clientY：鼠标距离可视区域顶部的距离</li><li>e.offsetY：鼠标距离触发事件元素顶部的距离</li><li>e.screenY：鼠标距离屏幕顶部的距离</li><li>winwodw.scrollY：页面滚动的距离，也叫 window.pageYOffset，等同于 document.documentElement.scrollTop</li><li>element.scrollTop：元素滚动的距离</li><li>element.clientTop：上边框高度</li><li>element.offsetTop：相对有 position 的父元素的内容顶部的距离，可以递归累加，加上 clientTop，算出到文档顶部的距离</li><li>clientHeight：内容高度，不包括边框</li><li>offsetHeight：包含边框的高度</li><li>scrollHeight：滚动区域的高度，不包括边框</li><li>window.innerHeight：窗口的高度</li><li>element.getBoundingClientRect：拿到 width、height、top、left 属性，其中 top、left 是元素距离可视区域的距离，width、height 绝大多数情况下等同 offsetHeight、offsetWidth，但旋转之后就不一样了，拿到的是包围盒的宽高</li></ul><p>其中，还要注意 react 的合成事件没有 offsetY 属性，可以自己算，react-use 的 useMouse 的 hook 就是自己算的，也可以用 e.nativeEvent.offsetY 来拿到。</p><p>掌握这些宽高、距离属性，就足够处理各种需要计算位置、宽高的需求了。</p>",8)]))}const g=t(n,[["render",s]]);export{_ as __pageData,g as default};
