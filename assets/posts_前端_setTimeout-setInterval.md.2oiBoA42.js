import{_ as i,c as a,o as t,ah as e}from"./chunks/framework.DEXV2HBK.js";const E=JSON.parse('{"title":"为什么要用 setTimeout 模拟 setInterval","description":"","frontmatter":{"title":"为什么要用 setTimeout 模拟 setInterval","date":"2025-05-16T00:00:00.000Z","category":"frontEnd","tags":["frontEnd","八股文"]},"headers":[],"relativePath":"posts/前端/setTimeout-setInterval.md","filePath":"posts/前端/setTimeout-setInterval.md"}'),n={name:"posts/前端/setTimeout-setInterval.md"};function l(h,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<p>使用 <code>setTimeout</code> 模拟 <code>setInterval</code> 的主要原因是为了解决 <code>setInterval</code> 在某些场景下可能带来的问题。虽然 <code>setInterval</code> 看起来更简单直接，但它的行为在一些复杂或异步任务中可能会导致不可预料的问题。而通过递归或链式调用 <code>setTimeout</code>，我们可以更好地控制定时任务的执行。</p><hr><h2 id="一、setinterval-的局限性" tabindex="-1">一、<code>setInterval</code> 的局限性 <a class="header-anchor" href="#一、setinterval-的局限性" aria-label="Permalink to &quot;一、\`setInterval\` 的局限性&quot;">​</a></h2><h3 id="_1-重复执行不考虑异步操作完成时间" tabindex="-1">1. <strong>重复执行不考虑异步操作完成时间</strong> <a class="header-anchor" href="#_1-重复执行不考虑异步操作完成时间" aria-label="Permalink to &quot;1. **重复执行不考虑异步操作完成时间**&quot;">​</a></h3><p>如果在 <code>setInterval</code> 中执行的是一个异步操作（如 AJAX 请求、动画、Promise 等），它<strong>不会等待上一次操作完成</strong>，就会开始下一轮执行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设这个任务耗时 2 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>这段代码每秒启动一个任务，即使前面的任务还没完成。这可能导致多个任务重叠执行，造成资源竞争或数据混乱。</p><hr><h3 id="_2-无法动态调整间隔时间" tabindex="-1">2. <strong>无法动态调整间隔时间</strong> <a class="header-anchor" href="#_2-无法动态调整间隔时间" aria-label="Permalink to &quot;2. **无法动态调整间隔时间**&quot;">​</a></h3><p><code>setInterval</code> 的时间间隔是固定的，一旦设置就很难动态修改。如果你需要根据运行时状态来调整下一次执行的时间，<code>setInterval</code> 就不太适合。</p><hr><h3 id="_3-清除机制不够灵活" tabindex="-1">3. <strong>清除机制不够灵活</strong> <a class="header-anchor" href="#_3-清除机制不够灵活" aria-label="Permalink to &quot;3. **清除机制不够灵活**&quot;">​</a></h3><p>如果任务出错或者中途需要停止，<code>setInterval</code> 需要手动调用 <code>clearInterval</code>，并且不能很好地与 Promise 或 async/await 结合使用。</p><hr><h2 id="二、使用-settimeout-模拟-setinterval-的优势" tabindex="-1">二、使用 <code>setTimeout</code> 模拟 <code>setInterval</code> 的优势 <a class="header-anchor" href="#二、使用-settimeout-模拟-setinterval-的优势" aria-label="Permalink to &quot;二、使用 \`setTimeout\` 模拟 \`setInterval\` 的优势&quot;">​</a></h2><p>通过递归调用 <code>setTimeout</code>，我们可以在每次任务完成后决定是否继续下一次执行，并且可以动态地控制下一次执行的时间。</p><h3 id="✅-示例-模拟-setinterval" tabindex="-1">✅ 示例：模拟 <code>setInterval</code> <a class="header-anchor" href="#✅-示例-模拟-setinterval" aria-label="Permalink to &quot;✅ 示例：模拟 \`setInterval\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySetInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop, interval); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下一次执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回取消方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cancel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySetInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cancel();</span></span></code></pre></div><hr><h2 id="三、适用场景对比" tabindex="-1">三、适用场景对比 <a class="header-anchor" href="#三、适用场景对比" aria-label="Permalink to &quot;三、适用场景对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>场景</th><th>推荐方式</th><th>说明</th></tr></thead><tbody><tr><td>固定时间间隔，任务同步、轻量</td><td><code>setInterval</code></td><td>简单直接</td></tr><tr><td>异步任务、需要控制流程、动态间隔</td><td><code>setTimeout</code> 模拟</td><td>更加灵活可控</td></tr><tr><td>需要结合 Promise / async-await</td><td><code>setTimeout</code> 模拟</td><td>更容易集成</td></tr><tr><td>防止任务堆积、避免并发问题</td><td><code>setTimeout</code> 模拟</td><td>安全可靠</td></tr></tbody></table><hr><h2 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h2><blockquote><p><strong>为什么要用 <code>setTimeout</code> 模拟 <code>setInterval</code>？</strong></p></blockquote><p>因为：</p><ul><li>它能确保前一个任务完全结束后才触发下一个；</li><li>支持动态控制下一次执行的时间；</li><li>更容易处理错误和中断；</li><li>更好地支持异步逻辑和现代 JS 特性（如 async/await）；</li><li>避免任务堆积和并发问题。</li></ul><p>所以，在需要更细粒度控制定时任务时，使用 <code>setTimeout</code> 模拟 <code>setInterval</code> 是一种更安全、更灵活的做法。</p><p>😊</p>`,28)]))}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
