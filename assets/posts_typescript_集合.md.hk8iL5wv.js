import{_ as e,c as r,o as t,ah as i}from"./chunks/framework.ptg7Kx6M.js";const u=JSON.parse('{"title":"javascript 集合","description":"","frontmatter":{"title":"javascript 集合","date":"2025-07-09T00:00:00.000Z","category":"javascript","tags":["api","method","javascript"]},"headers":[],"relativePath":"posts/typescript/集合.md","filePath":"posts/typescript/集合.md"}'),l={name:"posts/typescript/集合.md"};function o(s,a,h,n,d,c){return t(),r("div",null,a[0]||(a[0]=[i('<h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><p>| get | set | has | delete | clear | values | keys | entries | forEach | groupBy | size</p><h3 id="增-修" tabindex="-1">增/修 <a class="header-anchor" href="#增-修" aria-label="Permalink to &quot;增/修&quot;">​</a></h3><p>| set |</p><h3 id="删" tabindex="-1">删 <a class="header-anchor" href="#删" aria-label="Permalink to &quot;删&quot;">​</a></h3><p>| clear | delete |</p><h3 id="查" tabindex="-1">查 <a class="header-anchor" href="#查" aria-label="Permalink to &quot;查&quot;">​</a></h3><p>| get | has | size |</p><h3 id="聚合" tabindex="-1">聚合 <a class="header-anchor" href="#聚合" aria-label="Permalink to &quot;聚合&quot;">​</a></h3><p>| entries | keys | values |</p><h3 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h3><p>| forEach |</p><h3 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><p>| groupBy |</p><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><p>| add | clear | delete | difference | entries | forEach | has | keys | values | union | size | intersection | isDisjointFrom | isSubsetOf | isSuperOf |</p><h3 id="增" tabindex="-1">增 <a class="header-anchor" href="#增" aria-label="Permalink to &quot;增&quot;">​</a></h3><p>| add |</p><h3 id="删-1" tabindex="-1">删 <a class="header-anchor" href="#删-1" aria-label="Permalink to &quot;删&quot;">​</a></h3><p>| clear | delete |</p><h3 id="查-1" tabindex="-1">查 <a class="header-anchor" href="#查-1" aria-label="Permalink to &quot;查&quot;">​</a></h3><p>| has | size | isSubsetOf | isSuperOf | isDisjointFrom |</p><h3 id="聚合-差集、并集、交集" tabindex="-1">聚合 (差集、并集、交集) <a class="header-anchor" href="#聚合-差集、并集、交集" aria-label="Permalink to &quot;聚合 (差集、并集、交集)&quot;">​</a></h3><p>| difference | union | intersection | entries | keys | values |</p><h3 id="遍历-1" tabindex="-1">遍历 <a class="header-anchor" href="#遍历-1" aria-label="Permalink to &quot;遍历&quot;">​</a></h3><p>| forEach |</p><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><h3 id="改变原数组" tabindex="-1">改变原数组 <a class="header-anchor" href="#改变原数组" aria-label="Permalink to &quot;改变原数组&quot;">​</a></h3><ul><li>增删改查 | push | unshift | pop | shift | splice | copyWithin | fill |</li><li>排序与反转 | sort | reverse |</li></ul><h3 id="不改变原数组" tabindex="-1">不改变原数组 <a class="header-anchor" href="#不改变原数组" aria-label="Permalink to &quot;不改变原数组&quot;">​</a></h3><ul><li>定位元素 | includes | indexOf | lastIndexOf | find | findIndex |</li><li>映射过滤 | map | filter | forEach | reduce | reduceRight | flat | flatMap |</li><li>逻辑判断 | every | some |</li><li>转字符串、合并、切片 | join | slice | concat |</li><li>迭代器 | keys | values | entries |</li><li>ES2023 新增 | toSorted | toReversed | toSpliced | with |</li></ul><h3 id="静态方法-1" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法-1" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><p>| of | from | fromAsync | isArray |</p>',33)]))}const f=e(l,[["render",o]]);export{u as __pageData,f as default};
